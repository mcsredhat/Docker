# Docker Security Best Practices
## Introduction
Container security is a critical aspect of modern application deployment. While Docker containers provide isolation by design, they are not inherently secure without proper configuration. This guide explores essential security practices that will help you harden your Docker containers against potential threats and vulnerabilities.
By implementing these security measures, you'll significantly reduce the attack surface of your containerized applications and create a more resilient infrastructure. Whether you're running containers in development or production environments, these practices form the foundation of a secure Docker deployment strategy.

## 1. Running Containers as Non-Root Users
### Why This Matters
By default, many container images run as the root user, which poses significant security risks. If an attacker compromises a container running as root, they potentially gain elevated privileges that could be used to:
- Escape the container boundary
- Access the host filesystem
- Execute malicious commands with root privileges
- Compromise other containers or services on the host
Running containers as non-root users is one of the most important security practices you can implement, as it follows the principle of least privilege.
### Default Behavior
Many commonly used Docker images (including official images like nginx, node, and postgres) run as root by default unless explicitly configured otherwise. This creates an unnecessary security risk that must be addressed.
### Implementation Methods
#### Method 1: Using the USER Instruction in Dockerfile
FROM node:18-slim
# Create a non-root user with a specific UID/GID
RUN groupadd -g 1001 appgroup && \
    useradd -u 1001 -g appgroup -m appuser
# Set proper permissions on application files
WORKDIR /app
COPY --chown=appuser:appgroup . .
# Switch to the non-root user
USER appuser
# Run the application
CMD ["node", "app.js"]

#### Method 2: Runtime Configuration with `--user` Flag
# Run container with specific user ID and group ID
docker run -d --user 1001:1001 --name secure-app node:18-slim node app.js
### Verification
Always verify that your container is actually running as a non-root user:
# Check the current user inside the container
docker exec secure-app whoami
# Get more detailed user information
docker exec secure-app id
### Important Considerations
- The non-root user must have appropriate permissions to:
  - Access application files and directories
  - Bind to required network ports (ports >1024 typically don't require root)
  - Write to mounted volumes or logging destinations
- Create the user with a specific UID/GID to ensure consistent permissions across container restarts
- For applications that require root for initialization but not runtime, consider using an entrypoint script that drops privileges after setup

### Best Practices
- **Create dedicated users**: Don't rely on existing users in the base image
- **Use specific UIDs**: Avoid using UID 0 (root) or random UIDs
- **Set proper file permissions**: Ensure application files are owned by the non-root user
- **Test thoroughly**: Verify the application functions correctly with reduced privileges

## 2. Scanning Images for Vulnerabilities
### Why This Matters
Even the most secure application code can be compromised if it runs on a vulnerable base image or includes libraries with known security flaws. Container images often bundle operating system packages and application dependencies that may contain vulnerabilities. Regular scanning helps identify and remediate these issues before they can be exploited.
### Scanning Tools
#### Docker Scan
Docker Desktop and Docker Hub integrate with Snyk to provide vulnerability scanning capabilities.
**Basic Usage:**
# Scan a specific image
docker scan node:18-slim
# Scan with additional options
docker scan --file Dockerfile --severity high nginx:latest
**Key Options:**
- `--file`: Specify a Dockerfile to analyze build context
- `--severity`: Filter by severity level (critical, high, medium, low)
- `--json`: Output results in JSON format for integration with other tools

**Sample Output:**
Testing node:18-slim...
Package manager:   deb
Project name:      docker-image|node
Docker image:      node:18-slim
Platform:          linux/amd64
✓ Tested 427 dependencies for known vulnerabilities, found 18 vulnerabilities.
According to our scan, you are currently using version 1.1.1k-r0 of the openssl package, which is affected by the vulnerabilities below.
✗ High severity vulnerability found in openssl
  Description: Improper Certificate Validation
  Info: https://snyk.io/vuln/SNYK-ALPINE310-OPENSSL-1075739
  Introduced through: openssl@1.1.1k-r0
  From: openssl@1.1.1k-r0

#### Alternative Tools
Several other tools can be used to scan Docker images for vulnerabilities:
1. **Trivy**: An open-source vulnerability scanner specifically designed for containers
   ```bash
   # Install Trivy
   apt-get install trivy
   # Scan an image
   trivy image node:18-slim
2. **Clair**: An open-source project for static analysis of vulnerabilities in containers
3. **Anchore Engine**: A deep analysis tool for container images

### Vulnerability Remediation Strategies
Once vulnerabilities are identified, you can address them through various approaches:
#### 1. Update Base Images
Regularly update your base images to include security patches:
```dockerfile
FROM node:18-slim
# Update packages as part of the build process
RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Continue with your application setup
#### 2. Use Minimal Base Images
Smaller images have fewer components that could contain vulnerabilities:
```dockerfile
# Instead of full Ubuntu image
FROM ubuntu:20.04   # 72.8MB with many packages
# Consider using a minimal alternative
FROM alpine:3.16    # 5.6MB with minimal packages
#### 3. Multi-Stage Builds
Use multi-stage builds to separate build dependencies from runtime dependencies:
```dockerfile
# Build stage with all dependencies
FROM node:18 AS build
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
RUN npm run build

# Production stage with minimal runtime dependencies
FROM node:18-slim
WORKDIR /app
COPY --from=build /app/dist ./dist
COPY --from=build /app/package*.json ./
RUN npm install --only=production
USER node
CMD ["node", "dist/index.js"]

#### 4. Pin Specific Versions
Use specific image versions instead of `latest` tag to maintain consistency and control updates:
```dockerfile
# Not recommended
FROM node:latest
# Better approach
FROM node:18.14.2-slim

### Integration into CI/CD
Incorporate vulnerability scanning into your CI/CD pipeline to catch issues early:
```yaml
# Example GitHub Actions workflow
name: Container Security
on: [push, pull_request]
jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build image
        run: docker build -t myapp:${{ github.sha }} .
      - name: Scan image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'myapp:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

## 3. Restricting Container Permissions with AppArmor & Seccomp
### Why This Matters
Even when running as a non-root user, containers might still have capabilities or system call access that could be exploited. AppArmor and seccomp provide additional security layers by restricting what actions containers can perform, effectively reducing the attack surface.
### AppArmor Profiles
AppArmor is a Linux security module that restricts programs' capabilities by defining which files they can access and which operations they can perform.

#### Understanding Docker's Default AppArmor Profile
Docker automatically applies a default AppArmor profile (`docker-default`) to containers unless configured otherwise. This profile:
- Prevents containers from mounting filesystems
- Restricts access to sensitive `/proc` and `/sys` paths
- Blocks container processes from loading kernel modules

#### Creating a Custom AppArmor Profile
For more restrictive security requirements, you can create custom profiles:
1. Create a profile file (e.g., `my-custom-profile`):
#include <tunables/global>
profile docker-custom flags=(attach_disconnected, mediate_deleted) {
  #include <abstractions/base>
  # Deny network raw access
  deny network raw,
  # Deny access to sensitive filesystems
  deny mount,
  deny /proc/** rwklx,
  deny /sys/** rwklx,
  # Allow basic file operations needed by most applications
  /usr/bin/* ix,
  /var/log/* rw,
  /app/** rwix,
 
  # Allow necessary capabilities
  capability net_bind_service,
  capability dac_override,
}

2. Load the profile into the kernel:
sudo apparmor_parser -r -W my-custom-profile
3. Run a container with the custom profile:
docker run --security-opt apparmor=docker-custom -d --name secure-nginx nginx:latest

### Seccomp Profiles
Seccomp (Secure Computing Mode) restricts the system calls that a process can make, limiting potential attack vectors through the kernel.
#### Understanding Docker's Default Seccomp Profile
Docker's default seccomp profile blocks around 44 system calls out of 300+ available in Linux, providing a good balance between security and usability. This default profile prevents dangerous operations while allowing most legitimate container functions.
#### Creating a Custom Seccomp Profile
For tighter security control, create a custom seccomp profile:
1. Create a JSON file defining allowed system calls (e.g., `custom-seccomp.json`):
{
  "defaultAction": "SCMP_ACT_ERRNO",
  "architectures": [
    "SCMP_ARCH_X86_64",
    "SCMP_ARCH_X86",
    "SCMP_ARCH_AARCH64"
  ],
  "syscalls": [
    {
      "names": [
        "accept",
        "access",
        "arch_prctl",
        "bind",
        "brk",
        "chdir",
        "chmod",
        "clock_gettime",
        "clone",
        "close",
        "connect",
        "dup",
        "dup2",
        "epoll_create",
        "epoll_ctl",
        "epoll_wait",
        "execve",
        "exit",
        "exit_group",
        "fcntl",
        "fstat",
        "futex",
        "getcwd",
        "getdents",
        "getegid",
        "geteuid",
        "getgid",
        "getpid",
        "getppid",
        "getrlimit",
        "getuid",
        "ioctl",
        "listen",
        "lseek",
        "mkdir",
        "mmap",
        "mprotect",
        "munmap",
        "open",
        "pipe",
        "read",
        "readlink",
        "rt_sigaction",
        "rt_sigprocmask",
        "select",
        "sendto",
        "set_robust_list",
        "set_tid_address",
        "setgid",
        "setuid",
        "socket",
        "stat",
        "uname",
        "unlink",
        "wait4",
        "write"
      ],
      "action": "SCMP_ACT_ALLOW"
    }
  ]
}

2. Apply the profile when running a container:
docker run --security-opt seccomp=custom-seccomp.json -d --name restricted-nginx nginx:latest

### Verifying Restrictions
You can verify that your security profiles are working by attempting operations that should be blocked:
# Try to perform a restricted operation with AppArmor
docker exec secure-nginx mount -t tmpfs none /tmp
# Should fail with "mount: permission denied"
# Try a blocked system call with seccomp
docker exec restricted-nginx unshare --map-root-user
# Should fail if unshare syscall is not in allowed list

### Combining Security Measures
For maximum security, combine multiple restriction techniques:
docker run -d \
  --name ultra-secure \
  --user 1000:1000 \
  --security-opt apparmor=docker-custom \
  --security-opt seccomp=custom-seccomp.json \
  --security-opt no-new-privileges \
  --cap-drop ALL \
  --cap-add NET_BIND_SERVICE \
  nginx:latest

# Secure Docker Projects

## 1. Securing an Nginx Web Server

### Directory Structure
```
secure-nginx/
│── Dockerfile
│── nginx.conf
│── html/
│   └── index.html
```

### Step 1: Secure Dockerfile
```dockerfile
FROM nginx:1.23-alpine

# Update packages to patch vulnerabilities
RUN apk update && apk upgrade && apk add --no-cache shadow

# Create a dedicated non-root user
RUN groupadd -g 1001 nginxgroup && \ 
    useradd -u 1001 -g nginxgroup -s /bin/false -M nginxuser

# Configure Nginx to run as non-root
RUN sed -i 's/user  nginx;/user  nginxuser;/' /etc/nginx/nginx.conf && \
    touch /var/run/nginx.pid && \
    chown -R nginxuser:nginxgroup /var/run/nginx.pid && \
    chown -R nginxuser:nginxgroup /var/cache/nginx

# Copy custom Nginx configuration
COPY nginx.conf /etc/nginx/conf.d/default.conf
RUN chown -R nginxuser:nginxgroup /etc/nginx/conf.d

# Set correct permissions for web content
COPY --chown=nginxuser:nginxgroup html/ /usr/share/nginx/html/

# Expose non-privileged port
EXPOSE 8080

# Run as non-root user
USER nginxuser
CMD ["nginx", "-g", "daemon off;"]
```

### Step 2: Secure Nginx Configuration
```nginx
server {
    listen 8080;
    server_name localhost;

    location / {
        root /usr/share/nginx/html;
        index index.html index.htm;
    }

    # Security headers
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options DENY;
    add_header X-XSS-Protection "1; mode=block";
}
```

### Step 3: Create an Index Page
```html
<!-- html/index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Secure Nginx</title>
</head>
<body>
    <h1>Welcome to the Secure Nginx Server!</h1>
</body>
</html>
```

### Step 4: Build, Scan, and Run
```sh
# Build the image
docker build -t secure-nginx:latest .

# Scan for vulnerabilities
docker scan secure-nginx:latest

# Run with security options
docker run -d \
  --name secure-web \
  -p 8080:8080 \
  --security-opt no-new-privileges \
  --cap-drop ALL \
  --cap-add NET_BIND_SERVICE \
  secure-nginx:latest
```

### Step 5: Verify Security
```sh
# Check user permissions
docker exec secure-web id
# Should show uid=1001(nginxuser) gid=1001(nginxgroup)

# Check capabilities
docker exec secure-web capsh --print
# Should show limited capabilities

# Test access
curl http://localhost:8080
```

---

## 2. Securing a Node.js Application

### Directory Structure
```
secure-node/
│── Dockerfile
│── app.js
│── package.json
```

### Step 1: Secure Node.js Application
```javascript
// app.js
const http = require('http');

const server = http.createServer((req, res) => {
  res.statusCode = 200;
  res.setHeader('Content-Type', 'text/plain');
  res.end('Secure Node.js Application Running!\n');
});

const port = 3000;
server.listen(port, () => {
  console.log(`Server running on port ${port}`);
});
```

### Step 2: Create package.json
```json
{
  "name": "secure-node",
  "version": "1.0.0",
  "description": "A secure Node.js application",
  "main": "app.js",
  "scripts": {
    "start": "node app.js"
  },
  "dependencies": {}
}
```

### Step 3: Secure Dockerfile
```dockerfile
# Build stage
FROM node:18-slim AS build
WORKDIR /app
COPY package*.json ./
RUN npm install

# Runtime stage
FROM node:18-slim

# Update and clean
RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN groupadd -g 1001 nodegroup && \
    useradd -u 1001 -g nodegroup -m nodeuser

# Set up app directory with proper permissions
WORKDIR /app
COPY --from=build /app/node_modules ./node_modules
COPY --chown=nodeuser:nodegroup . .

# Switch to non-root user
USER nodeuser

# Expose port and run application
EXPOSE 3000
CMD ["node", "app.js"]
```

### Step 4: Build, Scan, and Run
```sh
# Build the image
docker build -t secure-node:latest .

# Scan for vulnerabilities
docker scan secure-node:latest

# Run with security options
docker run -d \
  --name secure-node-app \
  -p 3000:3000 \
  --security-opt no-new-privileges \
  --cap-drop ALL \
  secure-node:latest
```

### Step 5: Verify Security
```sh
# Check user permissions
docker exec secure-node-app id
# Should show uid=1001(nodeuser) gid=1001(nodegroup)

# Test access
curl http://localhost:3000
# Should return "Secure Node.js Application Running!"
```

---

## 3. Comprehensive Security Checklist

### Image Security
- [x] Use official or verified base images
- [x] Keep base images updated with security patches
- [x] Use specific image versions (not `latest` tag)
- [x] Implement multi-stage builds to reduce image size
- [x] Remove unnecessary tools and packages from final images
- [x] Store secrets securely (not in the image)

### Runtime Security
- [x] Run containers as non-root users
- [x] Use read-only file systems where possible (`--read-only` flag)
- [x] Limit container resources (CPU, memory, pids)

---

## 4. Advanced Security Configurations
```json
{
  "icc": false,
  "userns-remap": "default",
  "no-new-privileges": true,
  "live-restore": true,
  "userland-proxy": false,
  "seccomp-profile": "/etc/docker/seccomp-profile.json"
}
```

These settings:
- Disable inter-container communication (`icc: false`)
- Enable user namespace remapping for additional isolation
- Prevent privilege escalation for all containers by default
- Allow containers to continue running if the daemon crashes
- Disable the userland proxy for better performance
- Apply a custom seccomp profile to all containers

### Network Security with Docker Networks
Create isolated networks for different application tiers:
# Create frontend network
docker network create frontend --internal=false
# Create backend network (no direct external access)
docker network create backend --internal=true
# Run web server on frontend network
docker run -d --name web --network frontend -p 8080:8080 secure-nginx:latest
# Run API server on both networks
docker run -d --name api --network frontend secure-api:latest
docker network connect backend api
# Run database on backend network only
docker run -d --name db --network backend secure-postgres:latest

This configuration ensures that:
- The database is not directly accessible from the outside
- The web server can communicate with the API but not the database
- The API server can access both web and database tiers

