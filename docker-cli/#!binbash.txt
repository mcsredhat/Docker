#!/bin/bash

# =====================================
# Nginx Docker Container Setup Script
# =====================================
# Author: Your Team
# Purpose: Secure and optimized deployment of Nginx with API and MySQL integration
# =====================================

# Step 1: Check if Docker is installed
echo "Checking if Docker is installed..."
if ! command -v docker &> /dev/null; then
    echo "Error: Docker is not installed. Please install Docker before proceeding."
    exit 1  # Exit the script if Docker is missing
fi

# Step 2: Create a dedicated Docker network for communication between services
echo "Creating a secure Docker network (app-network)..."
docker network create \
    --driver bridge \  # Use bridge networking mode for internal communication
    --subnet 192.168.1.0/24 \  # Define a custom subnet
    --gateway 192.168.1.1 \  # Set a gateway for network traffic
    app-network || echo "Network already exists, continuing..."  # Avoid duplicate network creation

# Step 3: Create directories required for Nginx configuration
echo "Creating necessary directories..."
mkdir -p /host/nginx/conf /host/nginx/logs /host/nginx/html /host/nginx/ssl  

# Step 4: Set permissions for Nginx directories
echo "Setting secure permissions..."
chmod 750 /host/nginx/conf /host/nginx/logs /host/nginx/html  # Restrict access to specific users

# Step 5: Configure Nginx reverse proxy to route traffic to the API service
echo "Creating reverse proxy configuration for API..."
cat > /host/nginx/conf/api-proxy.conf << EOF
server {
    listen 80;  # Listen on port 80 (HTTP)
    server_name api.example.com;  # Define server name

    location / {
        proxy_pass http://192.168.1.10:5000;  # Forward requests to the API container
        proxy_set_header Host \$host;  # Preserve original host header
        proxy_set_header X-Real-IP \$remote_addr;  # Forward client IP
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;  # Enable request tracing
        proxy_set_header X-Forwarded-Proto \$scheme;  # Pass HTTP/HTTPS scheme

        # Enable caching to optimize performance
        proxy_cache my_cache;
        proxy_cache_valid 200 1h;  # Cache successful responses for 1 hour
        proxy_cache_use_stale error timeout updating;  # Serve stale content if the backend is slow
    }
}
EOF

# Step : Configure SSL/TLS for secure communication
echo "Creating SSL security configuration..."
cat > /host/nginx/conf/ssl.conf << EOF
# Enable secure TLS versions
ssl_protocols TLSv1.2 TLSv1.3;
ssl_prefer_server_ciphers on;
ssl_ciphers EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH;
ssl_ecdh_curve secp384r1;  # Use a secure elliptic curve
ssl_session_timeout 10m;  # Set session timeout
ssl_session_cache shared:SSL:10m;  # Define session cache
ssl_session_tickets off;  # Disable session tickets for security
ssl_stapling on;  # Enable OCSP stapling
ssl_stapling_verify on;  # Verify OCSP responses
ssl_trusted_certificate /etc/nginx/ssl/chain.pem;  # Define trusted certificate
EOF

# Step : Deploy the Nginx container
echo "Starting the Nginx container..."
docker run -d \
    --name my-nginx \  # Name the Nginx container
    --hostname nginx-host \  # Set a hostname
    --network app-network \  # Connect Nginx to the app-network
    --ip 192.168.1.5 \  # Assign a static IP

    # Resource Management
    --memory=256m \  # Limit maximum memory usage
    --memory-reservation=128m \  # Set a soft memory limit
    --memory-swap=512m \  # Define swap memory limit
    --oom-kill-disable=false \  # Allow killing the container if it exceeds memory
    --cpus="1.0" \  # Restrict to 1 CPU core
    --cpu-shares=512 \  # Set CPU priority
    --pids-limit=100 \  # Restrict the number of processes

    # Network & Ports
    --publish 80:80 \  # Expose HTTP port
    --publish 443:443 \  # Expose HTTPS port

    # Mount Volumes
    --volume /host/nginx/conf:/etc/nginx/conf.d:ro \  # Mount configuration files (read-only)
    --volume /host/nginx/html:/usr/share/nginx/html:ro \  # Mount web content (read-only)
    --volume /host/nginx/ssl:/etc/nginx/ssl:ro \  # Mount SSL certificates (read-only)
    --volume /host/nginx/logs:/var/log/nginx:rw \  # Mount logs (read/write)

    # Security Hardening
    --user nginx \  # Run as non-root user
    --restart unless-stopped \  # Restart unless manually stopped
    --read-only \  # Prevent modifications to the filesystem
    --tmpfs /run:size=10m,mode=1777 \  # Temporary runtime files in memory
    --tmpfs /var/log/nginx:size=10m,mode=1777 \  # Store logs in memory
    --tmpfs /tmp:size=50m,mode=1777 \  # Temporary files in memory

    # Health Checks
    --health-cmd="sh -c 'nginx -t && curl -sS --fail http://localhost/health || exit 1'" \  # Verify Nginx configuration and API health
    --health-interval=30s \
    --health-retries=3 \
    --health-timeout=5s \
    --health-start-period=60s \

    # Additional Security Measures
    --security-opt=no-new-privileges:true \  # Prevent privilege escalation
    --cap-drop=ALL \  # Remove unnecessary Linux capabilities
    --cap-add=NET_BIND_SERVICE \  # Allow network binding

    nginx:stable-alpine  # Use lightweight Alpine-based Nginx

echo "Nginx setup completed successfully!"
