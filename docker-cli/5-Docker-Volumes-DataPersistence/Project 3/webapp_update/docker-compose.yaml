services:
  nginx-webserver:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NGINXVER: alpine
        USER_ID: 1111
        USER_NAME: nginxusr
        GROUP_ID: 1111
        GROUP_NAME: nginxusr
        APP_ENV: production
        BASH_SHELL: /bin/bash
        APP_DIR: /etc/nginx 
        MOUNT1: /nginx/data
        MOUNT2: /nginx/logs
        LOCAL_URL: http://localhost:8080/health
        VAR_log: /var/log/nginx
        VAR_cache: /var/cache/nginx
        dir_tmp: /tmp
        dir_run: /run 

    container_name: nginx_webserver_project
    hostname: nginx-hostname

    labels:
      - "maintainer=farajassulai@gmail.com"
      - "app=nginx_frontend_project"
      - "type=nginx_alpine"

    environment:
      NGINX_VER: alpine
      USER_ID: 1111
      USER_NAME: nginxusr
      GROUP_ID: 1111
      GROUP_NAME: nginxusr
      APP_ENV: production
      BASH_SHELL: /bin/bash
      APP_DIR: /etc/nginx 
      MOUNT1: /nginx/data
      MOUNT2: /nginx/logs
      BACKEND_HOST: database
      TZ: GMT+2
      LOCAL_URL: http://localhost:8080/health
      log_dir: /var/log/nginx
      cache_dir: /var/cache/nginx
      dir_tmp: /tmp
      dir_run: /run

    networks:
      - nginx_frontend_project-network

    dns:
      - 1.1.1.1
      - 8.8.8.8

    # nginx network ports
    ports:
     - "8080:8080"

    volumes:
      # Read-only volume for nginx configuration
      - ./nginx.conf:/etc/nginx/nginx.conf:ro 
      - ./conf/server.conf:/etc/nginx/conf.d/server.conf:ro 
      # Read-write volumes for nginx project and logs
      - nginx_data:/nginx/data:rw
      - nginx_logs:/nginx/logs:rw

    # Resource limits - using deploy syntax for modern compose
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.25"
        reservations:
          memory: 256M

    ulimits:
      nofile:
        soft: 1024
        hard: 4096
      nproc:
        soft: 512
        hard: 1024

    # Healthcheck
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "5"
        compress: "true"

    security_opt:
      - "no-new-privileges:true"

    # Minimal capabilities
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      - DAC_OVERRIDE

    # Tmpfs mounts for temporary directories
    tmpfs:
      - /tmp:rw,size=10m,mode=1777
      - /var/cache/nginx/client_temp:size=10m,mode=1777 
      - /var/cache/nginx/proxy_temp:size=10m,mode=1777 
      - /var/cache/nginx/fastcgi_temp:size=10m,mode=1777 
      - /var/cache/nginx/uwsgi_temp:size=10m,mode=1777 
      - /var/cache/nginx/scgi_temp:size=10m,mode=1777 
      - /run:rw,size=10m,mode=1777

    # Run as non-privileged user
    user: "1111:1111"

    # Container restart policy
    restart: unless-stopped

    # Working directory
    working_dir: /nginx

# Define named volumes
volumes:
  nginx_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  nginx_frontend_project-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24
