# Create Docker network
docker network create my-network
==========
Step 2: Create directories and files on host
# Create directories
mkdir -p /host/nginx/conf

# Give yourself permission to these directories
sudo chown -R $(id -u):$(id -g) /host/nginx
======================
Step 3: Create nginx configuration files
Create nginx.conf template with environment variable support
sudo vi /host/nginx/nginx.conf
-----------------------
# This is the main config file NGINX needs

#user  nginx;
pid /tmp/nginx.pid;
worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    access_log  /var/log/nginx/access.log;
    error_log   /var/log/nginx/error.log;

    sendfile        on;
    keepalive_timeout  65;

    include /etc/nginx/conf.d/*.conf;
}
========================================
Create server.conf that uses environment variables
sudo vi /host/nginx/conf/server.conf
------------------------
server {
    listen 8080;
    server_name localhost;

    location / {
        root /usr/share/nginx/html;
        index index.html index.htm;
    }
}
========================================

Step 4: Create the entrypoint script
================================
sudo vi /host/nginx/entrypoint.sh
---------------------------
#!/bin/sh
set -e

# Generate nginx.conf from template
envsubst < /etc/nginx/nginx.template > /run/nginx.conf

# Create log files
touch /var/log/nginx/access.log
touch /var/log/nginx/error.log

# Set proper permissions for log files
chmod 644 /var/log/nginx/*.log 

# Start nginx using the generated config
exec nginx -c /run/nginx.conf -g "daemon off;"
====================
sudo chmod +x /host/nginx/entrypoint.sh
=======================
Step 5: Run the docker container
-------------------------------
docker run \
  --name my-nginx2 \
  --hostname nginx-host \
  --label app=webserver \
  --label environment=production \
  --detach \
  --workdir /etc/nginx \
  --env BACKEND_HOST=my-database \
  --env TZ=UTC \
  --memory=256m \
  --cpus="0.8" \
  --pids-limit=100 \
  --network my-network \
  --publish 8088:80 \
  --dns 8.8.8.8 \
  --dns 1.1.1.1 \
  --volume /host/nginx/nginx.conf:/etc/nginx/nginx.template:ro \
  --volume /host/nginx/conf/server.conf:/etc/nginx/conf.d/server.conf:ro \
  --volume /host/nginx/entrypoint.sh:/entrypoint.sh:ro \
  --tmpfs /var/log/nginx:size=50m,mode=1777 \
  --tmpfs /var/cache/nginx:size=100m,mode=1777 \
  --tmpfs /var/cache/nginx/client_temp:size=10m,mode=1777 \
  --tmpfs /var/cache/nginx/proxy_temp:size=10m,mode=1777 \
  --tmpfs /var/cache/nginx/fastcgi_temp:size=10m,mode=1777 \
  --tmpfs /var/cache/nginx/uwsgi_temp:size=10m,mode=1777 \
  --tmpfs /var/cache/nginx/scgi_temp:size=10m,mode=1777 \
  --tmpfs /run:rw,size=10m \
  --tmpfs /tmp:rw,size=10m \
  --read-only \
  --cap-drop=ALL \
  --cap-add=NET_BIND_SERVICE \
  --cap-add=CHOWN \
  --cap-add=SETGID \
  --cap-add=SETUID \
  --security-opt no-new-privileges:true \
  --restart unless-stopped \
  --health-cmd="wget -q --spider http://127.0.0.1:80 || exit 1" \
  --health-interval=30s \
  --health-timeout=10s \
  --health-retries=3 \
  --health-start-period=10s \
  --log-driver=json-file \
  --log-opt max-size=10m \
  --log-opt max-file=3 \
  --log-opt compress=true \
  --entrypoint "/entrypoint.sh" \
  nginx
==================================
Step 6: Check if it worked
# Check if container is running
docker ps | grep my-nginx1

# Check logs for errors
docker logs my-nginx1

# Test if nginx is working
curl http://localhost:8088
