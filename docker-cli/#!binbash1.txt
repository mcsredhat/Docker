#!/bin/bash
# =====================================
# Optimized Nginx Docker Setup Script
# =====================================

# Strict error handling
set -euo pipefail

# Validate Script is Run as Root
if [[ $EUID -ne 0 ]]; then
   echo "Error: This script must be run as root" 
   exit 1
fi

# Define paths for Nginx configuration, logs, HTML files, and SSL certificates
BASE_PATH="/host/nginx"
CONF_PATH="$BASE_PATH/conf"
LOGS_PATH="$BASE_PATH/logs"
HTML_PATH="$BASE_PATH/html"
SSL_PATH="$BASE_PATH/ssl"

# Ensure required directories exist
mkdir -p "$CONF_PATH" "$LOGS_PATH" "$HTML_PATH" "$SSL_PATH"

# Set secure permissions for the directories
chmod 750 "$CONF_PATH" "$LOGS_PATH" "$HTML_PATH" "$SSL_PATH"

# Generate a self-signed SSL certificate
echo "Generating self-signed SSL certificate..."
openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
    -keyout "$SSL_PATH/nginx-selfsigned.key" \
    -out "$SSL_PATH/nginx-selfsigned.crt" \
    -subj "/C=US/ST=LocalTest/L=LocalDev/O=Development/CN=localhost"

# Create a basic Nginx configuration file (nginx.conf)
echo "Creating Nginx configuration..."
cat << EOF > "$CONF_PATH/nginx.conf"
user nginx;
worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Default server block for localhost
    server {
        listen 80;
        listen 443 ssl;
        server_name localhost;

        # SSL Configuration
        ssl_certificate /etc/nginx/ssl/nginx-selfsigned.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx-selfsigned.key;

        # Sample welcome page
        location / {
            root /usr/share/nginx/html;
            index index.html;
        }
    }
}
EOF

# Create a basic index.html page
echo "Creating index.html page..."
cat << EOF > "$HTML_PATH/index.html"
<!DOCTYPE html>
<html>
<head>
    <title>Welcome to Local Nginx Server</title>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            text-align: center; 
            padding-top: 50px; 
            background-color: #f0f0f0; 
        }
        h1 { color: #333; }
    </style>
</head>
<body>
    <h1>Welcome to Local Nginx Server</h1>
    <p>This is a local development server running Nginx</p>
</body>
</html>
EOF

# Set proper ownership of the directories (optional, depends on user running the script)
groupadd -f nginx 
useradd -r -g nginx nginx 
echo "Setting directory ownership for security..."
chown -R root:root "$BASE_PATH"
chown -R nginx:nginx "$HTML_PATH" "$LOGS_PATH" "$SSL_PATH"

echo "Creating custom Docker network..."
docker network create \
    --driver bridge \
    --subnet=192.168.50.0/24 \
    --gateway=192.168.50.1 \
    "$NETWORK_NAME" || true

# Run the Nginx container with optimized settings
echo "Starting Nginx container..."

docker run \
    --name my-nginx \  # Set the container name to 'my-nginx'
    --hostname nginx-host \  # Assign a hostname to the container
    --label app=webserver \  # Label to identify the application type
    --label version=latest \  # Label to track the version
    --label maintainer=your-team \  # Label to document the maintainer's team

    # Memory & CPU limits to ensure efficient resource utilization
    --memory=256m \  # Hard memory limit to prevent excessive usage
    --memory-reservation=128m \  # Soft memory reservation to ensure base memory availability
    --memory-swap=512m \  # Allow swapping up to 512MB if needed
    --oom-kill-disable=false \  # Allow the OS to kill the container if it runs out of memory
    --cpus="0.8" \  # Limit CPU usage to 80% of a single core
    --cpu-shares=512 \  # CPU share allocation for priority handling
    --pids-limit=100 \  # Prevent fork bombs by limiting process count inside the container

    # Network settings
    --network my-network \  # Attach the container to a custom user-defined network
    --ip "$CONTAINER_IP"
    # Publish container ports to the host machine
    --publish 8080:80 \  # Map container's HTTP port 80 to host port 8080
    --publish 8443:443 \  # Map container's HTTPS port 443 to host port 8443

    # Mount volumes for persistent storage
    --volume "$CONF_PATH:/etc/nginx/conf.d:ro" \  # Mount custom Nginx config (read-only)
    --volume "$HTML_PATH:/usr/share/nginx/html:ro" \  # Mount website files (read-only)
    --volume "$SSL_PATH:/etc/nginx/ssl:ro" \  # Mount SSL certificates (read-only)
    --volume "$LOGS_PATH:/var/log/nginx:rw" \  # Mount logs with read/write access

    # Security configurations
    --user nginx \  # Run the container as a non-root user (nginx) for security
    --restart unless-stopped \  # Restart automatically unless manually stopped
    --read-only \  # Make the filesystem read-only to prevent unauthorized modifications
    --tmpfs /run \  # Use tmpfs for runtime files (in-memory storage)
    --tmpfs /var/log/nginx:size=10m,mode=1777 \  # Store logs in memory (10MB size limit)
    --tmpfs /tmp:size=50m,mode=1777 \  # Store temporary files in memory (50MB size limit)

    # Health check to ensure Nginx is running
    --health-cmd="curl --silent --fail http://localhost/health || exit 1" \  # Check if Nginx is serving requests
    --health-interval=30s \  # Run health check every 30 seconds
    --health-retries=3 \  # Allow up to 3 failed health checks before marking the container unhealthy
    --health-timeout=5s \  # Timeout of 5 seconds for each health check

    # Additional security measures
    --security-opt=no-new-privileges:true \  # Prevent privilege escalation inside the container
    --cap-drop=ALL \  # Drop all Linux capabilities to reduce attack surface
    --cap-add=NET_BIND_SERVICE \  # Allow only the capability to bind to privileged ports

    # Use the stable Alpine variant of Nginx (lightweight and secure)
    --detach \  # Run the container in detached mode (background)
    nginx:stable-alpine  # Use the stable-alpine version of Nginx for smaller footprint

echo "Local Nginx deployment completed successfully!"

# Provide access information
echo "Access your local server:"
echo "- HTTP:  http://localhost:8080"
echo "- HTTPS: https://localhost:8443"
echo "Note: You'll see a security warning for the self-signed certificate."
