# Docker Container Debugging & Logging
## Introduction
Debugging is an essential skill for working with Docker containers. When running applications in isolated environments, traditional debugging methods often don't apply, making Docker-specific tools and techniques crucial. This comprehensive guide explores methods for troubleshooting container issues, analyzing logs, investigating build failures, and gathering detailed information about container state and configuration.
## 1. Understanding Container Logs
### The Importance of Container Logging
Container logs capture the stdout and stderr output streams from the main process running inside a container. These logs provide critical insights into:
- Application startup messages and errors
- Runtime behavior and warnings
- Performance issues
- Security alerts
- Application-specific information
Since containers are designed to be ephemeral, logs often serve as the primary diagnostic tool when problems occur.

### Using the `docker logs` Command
The `docker logs` command is your first line of defense when troubleshooting container issues.
**Basic Syntax:**
docker logs <container-id-or-name> [options]

**Key Options:**

| Option | Description | Example |
|--------|-------------|---------|
| `--follow` or `-f` | Stream logs in real-time | `docker logs -f my-container` |
| `--tail <n>` | Show only the last n lines | `docker logs --tail 100 my-container` |
| `--since <time>` | Show logs since specified time | `docker logs --since 30m my-container` |
| `--until <time>` | Show logs before specified time | `docker logs --until "2023-05-01T10:00:00" my-container` |
| `--timestamps` or `-t` | Add timestamps | `docker logs -t my-container` |

### Practical Examples
#### Basic Log Retrieval
# Start a container
docker run -d --name web-server nginx:latest
# View all logs
docker logs web-server
This displays all logs from the container's stdout and stderr, showing Nginx startup messages and access logs.
#### Real-Time Log Monitoring
# Stream logs in real-time
docker logs -f web-server

# In another terminal, generate traffic
curl http://localhost:80

# Watch as new logs appear (press Ctrl+C to exit)
This is particularly useful during development or when troubleshooting intermittent issues.

#### Viewing Recent Log Entries
# Show only the last 10 lines
docker logs --tail 10 web-server
# Show logs from the last 5 minutes
docker logs --since 5m web-server
These commands help when you need to focus on recent events without filtering through extensive output.

### Log Persistence
By default, Docker logs are stored using the json-file logging driver, which keeps logs on the host filesystem. However, container logs are lost when a container is removed unless you:
1. Configure log rotation to prevent excessive disk usage:
   docker run --log-opt max-size=10m --log-opt max-file=3 nginx
2. Use a logging driver that sends logs to external systems:
   docker run --log-driver=syslog nginx
3. Mount a volume to persist logs:
   docker run -v /path/on/host:/var/log/nginx nginx

## 2. Troubleshooting Failed Container Builds
### Common Build Failure Causes
Docker build failures typically fall into several categories:
1. **Syntax errors** in the Dockerfile
2. **Network issues** during package installation
3. **Missing dependencies** or incompatible versions
4. **Permission problems** when accessing files or directories
5. **Resource limitations** (disk space, memory)
6. **Cached layers** hiding changes or masking issues
### Using `--no-cache` to Debug Builds
When builds fail unexpectedly or when you need to ensure a completely fresh build, the `--no-cache` option is invaluable.
docker build --no-cache -t my-image:latest .
This forces Docker to execute each instruction without using any cached layers, which can reveal issues that might be hidden by outdated cache.

### Examining Intermediate Containers
When a build fails, Docker preserves the last successful intermediate container, which you can examine to debug the issue.
# From the build output, note the last successfully built layer ID
# Example output: Step 3/7 : RUN apt-get update
#  ---> Running in a72f40c16532
#  ---> 6b1abe3a6d6c
# Use the layer ID to start an interactive shell
docker run -it 6b1abe3a6d6c /bin/bash
# Now you can explore the container state and try commands manually
This technique allows you to interactively investigate the container state just before the failure occurred.

 project with detailed explanations, organized files, and comprehensive documentation.
Here's the project structure:
/debug-example
├── Dockerfile.bad
├── Dockerfile.fixed
├── Dockerfile.debug
├── scripts/
│   ├── debug.sh
│   └── inspect.sh
├── .env
└── README.md
1. Dockerfile.bad (Problematic Version)
dockerfile
FROM ubuntu:20.04
RUN apt-get update && apt-get install -y python3
RUN nonexistent-command  # This will cause the build to fail
CMD ["python3", "--version"]
2. Dockerfile.fixed (Corrected Version)
dockerfile
FROM ubuntu:20.04
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && \
    apt-get install -y python3 && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*
RUN echo "Build step completed successfully"
CMD ["python3", "--version"]
3. Dockerfile.debug (Advanced Debugging Version)
dockerfile
# Build stage
FROM ubuntu:20.04 AS build-stage
ENV DEBIAN_FRONTEND=noninteractive
RUN echo "DEBUG: Starting package installation" && \
    apt-get update && \
    echo "DEBUG: Package lists updated" && \
    apt-get install -y --verbose-versions python3 && \
    echo "DEBUG: Python installed" && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Test stage
FROM build-stage AS test-stage
RUN python3 --version

# Final stage
FROM build-stage
LABEL maintainer="Debug Example <debug@example.com>"
HEALTHCHECK CMD python3 --version || exit 1
CMD ["python3", "--version"]
4. scripts/debug.sh
bash
#!/bin/bash
# Debug script for troubleshooting build issues

echo "Attempting to build problematic Dockerfile..."
docker build -f Dockerfile.bad -t debug-example:bad .

echo -e "\nLast successful layer ID will be shown in error message above"
echo "Enter the layer ID to debug (e.g., abc123def456):"
read layer_id

if [ ! -z "$layer_id" ]; then
    echo "Launching interactive shell in last successful layer..."
    docker run -it "$layer_id" /bin/bash
else
    echo "No layer ID provided, skipping interactive debug"
fi

echo -e "\nBuilding fixed version..."
docker build --no-cache -f Dockerfile.fixed -t debug-example:fixed .
5. scripts/inspect.sh
bash
#!/bin/bash
# Container inspection script

CONTAINER_NAME="debug-container"

echo "Starting container..."
docker run -d --name "$CONTAINER_NAME" debug-example:fixed

echo -e "\nBasic container info:"
docker inspect "$CONTAINER_NAME" | head -n 20

echo -e "\nSpecific information using format templates:"
echo "Exit Code and Error:"
docker inspect --format '{{.State.ExitCode}} {{.State.Error}}' "$CONTAINER_NAME"
echo "IP Address:"
docker inspect --format '{{.NetworkSettings.IPAddress}}' "$CONTAINER_NAME"
echo "Environment Variables:"
docker inspect --format '{{range .Config.Env}}{{.}}{{println}}{{end}}' "$CONTAINER_NAME"
echo "Mounted Volumes:"
docker inspect --format '{{range .Mounts}}{{.Source}} -> {{.Destination}}{{println}}{{end}}' "$CONTAINER_NAME"

echo -e "\nCleaning up..."
docker stop "$CONTAINER_NAME"
docker rm "$CONTAINER_NAME"
6. .env
plaintext
DEBUG_MODE=true
CONTAINER_NAME=debug-container
7. README.md
markdown
# Docker Build Debugging Example

This project demonstrates debugging techniques for Docker builds and container inspection.

## Project Structure
- `Dockerfile.bad`: Problematic Dockerfile with intentional error
- `Dockerfile.fixed`: Corrected version of the Dockerfile
- `Dockerfile.debug`: Advanced version with debugging features
- `scripts/debug.sh`: Build debugging script
- `scripts/inspect.sh`: Container inspection script
- `.env`: Environment variables

## Debugging Process

### Step 1: Identify Build Failure
```bash
chmod +x scripts/debug.sh
./scripts/debug.sh
Attempts to build the bad Dockerfile
Shows the error message
Allows interactive debugging of the last successful layer
Step 2: Analyze the Failure
Error code 127 indicates "command not found"
Use the interactive shell to test commands
Note the layer ID from the build output
Step 3: Verify Fixed Version
The fixed Dockerfile replaces the bad command with a working one
Uses proper cleanup and environment variables
Advanced Debugging Features
The Dockerfile.debug includes:
Multi-stage builds for isolation
Debug statements between commands
Verbose package installation
Health checks
Proper labeling
Container Inspection
bash
chmod +x scripts/inspect.sh
./scripts/inspect.sh
This script demonstrates:
Basic container inspection
Formatted output for specific details
Environment variable inspection
Mount point verification
Key Learning Points
Build Debugging
Use layer IDs to debug failed builds
Interactive shell for testing
No-cache builds for verification
Container Inspection
State monitoring
Network configuration
Resource settings
Mount verification
Best Practices
Multi-stage builds
Debug logging
Environment variables
Cleanup steps

### How to Use This Project

1. Clone or create the directory structure
2. Make scripts executable:
```bash
chmod +x scripts/*.sh
Run the debug script to see the failure and fix process:
bash
./scripts/debug.sh
Build the debug version:
bash
docker build -f Dockerfile.debug -t debug-example:debug .
Run the inspection script:
bash
./scripts/inspect.sh
Explanation of Improvements
Structured Approach: Separate files for different purposes
Automation: Scripts for consistent debugging
Documentation: Clear steps and explanations
Advanced Features: Multi-stage builds and health checks
Practical Tools: Inspection templates and debug statements
Reproducibility: Environment variables and cleanup
This project provides a comprehensive learning tool for Docker debugging while maintaining production-ready practices.### Understanding Exit Codes
Exit codes provide valuable clues about why a container stopped:

| Exit Code | Meaning | Common Cause |
|-----------|---------|--------------|
| 0 | Success | Normal termination |
| 1 | General error | Application error or exception |
| 125 | Docker daemon error | Issues with the Docker runtime |
| 126 | Command cannot be invoked | Permission problem |
| 127 | Command not found | Missing executable or typo |
| 137 | SIGKILL received | Out of memory or forced kill |
| 143 | SIGTERM received | Graceful termination request |

### Practical Inspection Example
Let's examine a container that crashed on startup:
# Run a container with a command that doesn't exist
docker run -d --name crash-demo alpine nonexistent-command
# Check container status
docker ps -a | grep crash-demo
# Output shows "Exited (127)" status
# View detailed information
docker inspect crash-demo
# Extract just the state information
docker inspect --format '{{json .State}}' crash-demo | jq
This reveals the exact cause of failure through the exit code and provides detailed information about when the container ran and how it was configured.

## 4. Comprehensive Debugging Workflow
A systematic approach to container debugging combines multiple techniques:
### Step 1: Identify the Problem
# List all containers, including stopped ones
docker ps -a
# Look for containers with non-zero exit codes
docker ps -a --filter "exited=1"

### Step 2: Examine Logs
# Check container logs
docker logs problem-container
# Look at the last few log entries
docker logs --tail 20 problem-container

### Step 3: Inspect Container Details
# Get exit code and error message
docker inspect --format '{{.State.ExitCode}} {{.State.Error}}' problem-container
# Check full configuration
docker inspect problem-container

### Step 4: Reproduce in Interactive Mode
# Run the same image with an interactive shell instead of the default command
docker run -it --entrypoint /bin/sh problem-image:tag

# Try to run the original command manually
command-that-failed
### Step 5: Test with Minimal Configuration
# Run with minimal options to isolate issues
docker run --rm problem-image:tag

## 5. Hands-On Debugging Exercise: Web Server Troubleshooting
Let's work through a complete debugging scenario for a web server that isn't responding as expected.
### Scenario Setup
1. **Create a simple web server with an intentional issue:**
```dockerfile
FROM nginx:latest
COPY nonexistent-file.html /usr/share/nginx/html/index.html
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]

2. **Build and run the container:**
docker build -t buggy-web:latest .
docker run -d --name buggy-server -p 8080:80 buggy-web:latest

### Debugging Process
1. **Check container status:**
docker ps -a | grep buggy-server
If the container is running, the issue might be inside the application. If it exited, we need to investigate why.
2. **Examine logs:**
docker logs buggy-server
Look for error messages like:
2023/05/01 12:34:56 [error] 6#6: open() "/usr/share/nginx/html/index.html" failed (2: No such file or directory)
3. **Inspect the container:**
docker inspect buggy-server
Check the configuration, particularly mounts and volumes.
4. **Test interactively:**
docker exec -it buggy-server /bin/bash
ls -la /usr/share/nginx/html/
This confirms that `index.html` is missing.
5. **Fix the issue:**
Create a new Dockerfile:
FROM nginx:latest
RUN echo "<html><body><h1>Hello, Docker!</h1></body></html>" > /usr/share/nginx/html/index.html
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]

Rebuild and run:
docker build -t fixed-web:latest .
docker run -d --name fixed-server -p 8080:80 fixed-web:latest
curl http://localhost:8080

## 6. Advanced Debugging Techniques
### Using Health Checks for Proactive Monitoring
Configure health checks to detect problems early:
```dockerfile
FROM nginx:latest
HEALTHCHECK --interval=30s --timeout=3s --retries=3 \
  CMD curl -f http://localhost/ || exit 1

### Enabling Docker Daemon Debug Mode
For troubleshooting issues with the Docker daemon itself:
# Edit daemon configuration
sudo nano /etc/docker/daemon.json
# Add debug configuration
{
  "debug": true
}

# Restart Docker
sudo systemctl restart docker
Logs will be available in the system journal or Docker log files.

### Using Docker Events for Troubleshooting
Monitor Docker events to understand container lifecycle:
# Watch real-time events
docker events
# Filter events for a specific container
docker events --filter container=my-container
### Analyzing Resource Usage
Monitor resource consumption to identify potential bottlenecks:
# Check resource usage
docker stats
# Monitor specific container
docker stats my-container

==============================
## Project Structure:
/debug-example
├── Dockerfile.bad
├── Dockerfile.fixed
├── Dockerfile.debug
├── scripts/
│   ├── debug.sh
│   ├── inspect.sh
├── .env
├── .dockerignore
└── README.md

## Dockerfile.bad (Problematic Version)
```dockerfile
FROM ubuntu:20.04
RUN apt-get update && apt-get install -y python3
RUN nonexistent-command  # This will cause the build to fail
CMD ["python3", "--version"]
```

## Dockerfile.fixed (Corrected Version)
```dockerfile
FROM ubuntu:20.04
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && \
    apt-get install -y python3 && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*
CMD ["python3", "--version"]
```

## Dockerfile.debug (Advanced Debugging Version)
```dockerfile
FROM ubuntu:20.04 AS build-stage
ENV DEBIAN_FRONTEND=noninteractive
RUN echo "DEBUG: Starting package installation" && \
    apt-get update && \
    echo "DEBUG: Package lists updated" && \
    apt-get install -y --verbose-versions python3 && \
    echo "DEBUG: Python installed" && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

FROM build-stage AS test-stage
RUN python3 --version

FROM build-stage
LABEL maintainer="Debug Example <debug@example.com>"
HEALTHCHECK CMD python3 --version || exit 1
CMD ["python3", "--version"]
```

## scripts/debug.sh
```bash
#!/bin/bash
# Debug script for troubleshooting build issues

echo "Attempting to build problematic Dockerfile..."
docker build -f Dockerfile.bad -t debug-example:bad .

echo -e "\nLast successful layer ID will be shown in error message above"
echo "Enter the layer ID to debug (e.g., abc123def456):"
read layer_id

if [ ! -z "$layer_id" ]; then
    echo "Launching interactive shell in last successful layer..."
    docker run -it "$layer_id" /bin/bash
else
    echo "No layer ID provided, skipping interactive debug"
fi

echo -e "\nBuilding fixed version..."
docker build --no-cache -f Dockerfile.fixed -t debug-example:fixed .
```

## scripts/inspect.sh
```bash
#!/bin/bash
# Container inspection script

CONTAINER_NAME="debug-container"

echo "Starting container..."
docker run -d --name "$CONTAINER_NAME" debug-example:fixed

echo -e "\nBasic container info:"
docker inspect "$CONTAINER_NAME" | head -n 20

echo -e "\nSpecific information using format templates:"
echo "Exit Code and Error:"
docker inspect --format '{{.State.ExitCode}} {{.State.Error}}' "$CONTAINER_NAME"
echo "IP Address:"
docker inspect --format '{{.NetworkSettings.IPAddress}}' "$CONTAINER_NAME"
echo "Environment Variables:"
docker inspect --format '{{range .Config.Env}}{{.}}{{println}}{{end}}' "$CONTAINER_NAME"
echo "Mounted Volumes:"
docker inspect --format '{{range .Mounts}}{{.Source}} -> {{.Destination}}{{println}}{{end}}' "$CONTAINER_NAME"

echo -e "\nCleaning up..."
docker stop "$CONTAINER_NAME"
docker rm "$CONTAINER_NAME"
```

## .env
```plaintext
DEBUG_MODE=true
CONTAINER_NAME=debug-container
```

## .dockerignore
```plaintext
.env
*.log
cache/
```

## README.md
```markdown
# Docker Build Debugging Example

## Overview
This project provides an example of debugging Docker builds and inspecting running containers.

### Structure
- `Dockerfile.bad`: Contains an intentional error
- `Dockerfile.fixed`: Corrected version
- `Dockerfile.debug`: Debugging-enhanced version
- `scripts/debug.sh`: Helps debug failed builds
- `scripts/inspect.sh`: Inspects running containers
- `.env`: Configurable environment variables
- `.dockerignore`: Ignoring unnecessary files

### How to Use
1. Make scripts executable:
```bash
chmod +x scripts/*.sh
```

2. Run the debug script:
```bash
./scripts/debug.sh
```

3. Run the inspection script:
```bash
./scripts/inspect.sh
```

### Best Practices
- Use multi-stage builds
- Implement log management
- Configure environment variables properly
- Monitor health status of containers


