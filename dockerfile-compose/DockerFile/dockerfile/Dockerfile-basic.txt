# Lesson 1: Introduction to Dockerfile

## What is a Dockerfile?

A Dockerfile is a text file containing instructions that Docker uses to automatically build an image. Think of it as a recipe or blueprint that specifies all the components and steps needed to create a containerized environment for your application.

Each instruction in a Dockerfile creates a layer in the image, allowing for efficient caching and rebuilding. This layered approach is fundamental to Docker's efficiency.

#######################
# Basic Dockerfile Syntax with Docker CLI Equivalents

## FROM
```dockerfile
FROM python:3.9-slim
```
**Layer created:** Base image layer  
**Docker CLI equivalent:**
```bash
# There's no direct CLI equivalent as this initializes the build process
# The closest would be pulling the image:
docker pull python:3.9-slim
```
✅ **This is correct**

## RUN
```dockerfile
RUN apt-get update && apt-get install -y curl
```
**Layer created:** Filesystem changes from command execution  
**Docker CLI equivalent:**
```bash
# Create a container, run the command, then commit changes to a new image
docker run --name temp python:3.9-slim /bin/bash -c "apt-get update && apt-get install -y curl"
docker commit temp my-image:latest
docker rm temp
```
**Issues fixed:**
- Added `/bin/bash -c` to properly execute the shell command
- The original would fail because `apt-get update && apt-get install -y curl` needs shell interpretation

## CMD
```dockerfile
CMD ["python", "app.py"]
```
**Layer created:** Metadata layer (not a filesystem layer)  
**Docker CLI equivalent:**
```bash
# CMD doesn't have a direct CLI equivalent during build
# It sets the default command when running a container:
docker run my-image:latest
# (which would execute: python app.py)

# To replicate CMD during manual building:
docker create --name temp python:3.9-slim
# CMD is metadata only - no commit needed for this instruction alone
```
**Issues fixed:**
- CMD is metadata only and sets the default runtime command
- `docker run python:3.9-slim python app.py` runs the command immediately, not setting it as default

## COPY
```dockerfile
COPY app.py /app/
```
**Layer created:** Files added to the filesystem  
**Docker CLI equivalent:**
```bash
# Create a container, copy files into it, then commit changes
docker create --name temp python:3.9-slim
docker cp app.py temp:/app/
docker commit temp my-image:latest
docker rm temp
```
✅ **This is correct**

## WORKDIR
```dockerfile
WORKDIR /app
```
**Layer created:** Metadata layer (potentially filesystem layer if directory doesn't exist)  
**Docker CLI equivalent:**
```bash
# WORKDIR creates the directory and sets it as working directory
docker run --name temp python:3.9-slim mkdir -p /app
docker commit temp temp-with-dir
docker rm temp
# The working directory metadata would need to be set during container creation:
docker create --name temp2 -w /app temp-with-dir
docker commit temp2 my-image:latest
docker rm temp2
```
**Issues fixed:**
- Need to actually create the directory first with `mkdir -p`
- Then set the working directory metadata
- Original version only set metadata without ensuring directory exists

## Additional Important Notes

### ENV
```dockerfile
ENV PYTHONUNBUFFERED=1
```
**Docker CLI equivalent:**
```bash
docker create --name temp -e PYTHONUNBUFFERED=1 python:3.9-slim
docker commit temp my-image:latest
docker rm temp
```

### EXPOSE
```dockerfile
EXPOSE 8000
```
**Docker CLI equivalent:**
```bash
# EXPOSE is metadata only - no filesystem changes
docker create --name temp --expose 8000 python:3.9-slim
docker commit temp my-image:latest
docker rm temp
```

### Complete Manual Build Example
```bash
# Equivalent to a multi-instruction Dockerfile
docker pull python:3.9-slim

# RUN apt-get update && apt-get install -y curl
docker run --name temp1 python:3.9-slim /bin/bash -c "apt-get update && apt-get install -y curl"
docker commit temp1 step1
docker rm temp1

# WORKDIR /app (create directory)
docker run --name temp2 step1 mkdir -p /app
docker commit temp2 step2
docker rm temp2

# COPY app.py /app/
docker create --name temp3 -w /app step2
docker cp app.py temp3:/app/
docker commit temp3 step3
docker rm temp3

# Final image with metadata
docker create --name temp4 -w /app step3
docker commit temp4 my-final-image:latest
docker rm temp4

# Cleanup intermediate images
docker rmi step1 step2 step3
```

#################################

# Creating Your First Dockerfile

```dockerfile
# Use Python 3.9 as the base image
# CLI equivalent: docker pull python:3.9-slim
FROM python:3.9-slim

# Set the working directory inside the container
# CLI equivalent: docker run --name temp python:3.9-slim mkdir -p /app
#                docker commit temp temp-with-dir
#                docker rm temp
WORKDIR /app

# Copy requirements file
# CLI equivalent: docker create --name temp -w /app python:3.9-slim
#                docker cp requirements.txt temp:/app/
#                docker commit temp temp-with-req
#                docker rm temp
COPY requirements.txt .

# Install dependencies
# CLI equivalent: docker run --name temp -w /app temp-with-req /bin/bash -c "pip install --no-cache-dir -r requirements.txt"
#                docker commit temp temp-with-deps
#                docker rm temp
RUN pip install --no-cache-dir -r requirements.txt

# Copy the application code
# CLI equivalent: docker create --name temp -w /app temp-with-deps
#                docker cp . temp:/app/
#                docker commit temp temp-with-code
#                docker rm temp
COPY . .

# Tell Docker the container will listen on port 5000 (documentation only)
# CLI equivalent: docker create --name temp --expose 5000 -w /app temp-with-code
#                docker commit temp temp-with-expose
#                docker rm temp
EXPOSE 5000

# Command to run when container starts
# CLI equivalent: This sets metadata only - the actual execution happens at runtime:
#                docker run hello-flask:latest
#                (which would execute: python app.py)
CMD ["python", "app.py"]
```

## Running a Container from an Image

# Production-like run with multiple options
docker run -d \
  --name flask-production \
  --restart unless-stopped \
  -p 80:5000 \
  -e FLASK_ENV=production \
  -e DATABASE_URL=postgresql://user:pass@db:5432/mydb \
  -v /var/log/flask:/app/logs \
  --network my-network \
  hello-flask:latest

# Check if container is running
docker ps

# View container logs
docker logs hello-flask:latest
# or if you named it:
docker logs my-flask-app

# Follow logs in real-time
docker logs -f my-flask-app

# Access the application
curl http://localhost:5000
# or in browser: http://localhost:5000

=================
# Hands-on Demo: Write a basic Dockerfile for a Flask App

1. Create the following files in a new directory:

**app.py**:
```python
from flask import Flask

app = Flask(__name__)

@app.route('/')
def hello():
    return "Hello from Flask in Docker!"

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
```

**requirements.txt**:
```
flask==3.0.0
```

**Dockerfile**:
```dockerfile
# Base image layer
# CLI equivalent: docker pull python:3.9-slim
FROM python:3.9-slim

# Working directory layer (creates directory and sets metadata)
# CLI equivalent: docker run --name temp python:3.9-slim mkdir -p /app
#                docker commit temp temp-with-dir
#                docker rm temp
WORKDIR /app

# Layer for requirements.txt file
# CLI equivalent: docker create --name temp -w /app temp-with-dir
#                docker cp requirements.txt temp:/app/
#                docker commit temp temp-with-req
#                docker rm temp
COPY requirements.txt .

# Layer for installed dependencies
# CLI equivalent: docker run --name temp -w /app temp-with-req /bin/bash -c "pip install --no-cache-dir -r requirements.txt"
#                docker commit temp temp-with-deps
#                docker rm temp
RUN pip install --no-cache-dir -r requirements.txt

# Layer for application code
# CLI equivalent: docker create --name temp -w /app temp-with-deps
#                docker cp . temp:/app/
#                docker commit temp temp-with-code
#                docker rm temp
COPY . .

# Metadata for documentation
# CLI equivalent: docker create --name temp --expose 5000 -w /app temp-with-code
#                docker commit temp temp-final
#                docker rm temp
EXPOSE 5000

# Default command metadata
# CLI equivalent: Sets default runtime command - executes when running:
#                docker run flask-demo:latest
CMD ["python", "app.py"]
```

2. Build the Docker image:
```bash
docker build -t flask-demo:latest .
```

3. Run the container:
```bash
docker run -p 5000:5000 flask-demo:latest
```

4. Test the application by visiting http://localhost:5000 in your browser.

---

# Mini Project: Dockerize a To-Do List App with Flask

1. Create a new project directory with the following files:

**app.py**:
```python
from flask import Flask, render_template, request, redirect, url_for

app = Flask(__name__)

# Simple in-memory storage for tasks
tasks = []

@app.route('/')
def index():
    return render_template('index.html', tasks=tasks)

@app.route('/add', methods=['POST'])
def add():
    task = request.form.get('task')
    if task:
        tasks.append(task)
    return redirect(url_for('index'))

@app.route('/delete/<int:task_id>')
def delete(task_id):
    if 0 <= task_id < len(tasks):
        tasks.pop(task_id)
    return redirect(url_for('index'))

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
```

**templates/index.html**:
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flask To-Do App</title>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            max-width: 500px; 
            margin: 0 auto; 
            padding: 20px; 
            background-color: #f9f9f9;
        }
        h1 { color: #333; text-align: center; }
        ul { list-style-type: none; padding: 0; }
        li { 
            margin: 10px 0; 
            padding: 10px; 
            background-color: #fff; 
            border-radius: 4px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            display: flex; 
            justify-content: space-between; 
            align-items: center;
        }
        form { margin: 20px 0; display: flex; gap: 10px; }
        input[type="text"] { 
            flex-grow: 1; 
            padding: 10px; 
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
        }
        button { 
            padding: 10px 15px; 
            background-color: #4CAF50; 
            color: white; 
            border: none; 
            border-radius: 4px;
            cursor: pointer; 
            font-size: 16px;
        }
        button:hover { background-color: #45a049; }
        .delete-btn { 
            color: #f44336; 
            text-decoration: none; 
            padding: 4px 8px;
            border-radius: 3px;
            font-size: 14px;
        }
        .delete-btn:hover { background-color: #ffebee; }
        .empty-state { 
            text-align: center; 
            color: #666; 
            font-style: italic; 
            margin: 40px 0;
        }
    </style>
</head>
<body>
    <h1>📝 To-Do List</h1>
    
    <form action="/add" method="post">
        <input type="text" name="task" placeholder="Add a new task..." required maxlength="200">
        <button type="submit">Add Task</button>
    </form>
    
    {% if tasks %}
        <ul>
            {% for task in tasks %}
            <li>
                <span>{{ task }}</span>
                <a href="/delete/{{ loop.index0 }}" class="delete-btn" 
                   onclick="return confirm('Are you sure you want to delete this task?')">
                    🗑️ Delete
                </a>
            </li>
            {% endfor %}
        </ul>
    {% else %}
        <div class="empty-state">
            <p>No tasks yet! Add one above to get started.</p>
        </div>
    {% endif %}
</body>
</html>
```

**requirements.txt**:
```
flask==3.0.0
```

**Dockerfile**:
```dockerfile
# Base image layer
# CLI equivalent: docker pull python:3.9-slim
FROM python:3.9-slim

# Working directory layer
# CLI equivalent: docker run --name temp python:3.9-slim mkdir -p /app
#                docker commit temp temp-with-dir
#                docker rm temp
WORKDIR /app

# Layer for requirements.txt
# CLI equivalent: docker create --name temp -w /app temp-with-dir
#                docker cp requirements.txt temp:/app/
#                docker commit temp temp-with-req
#                docker rm temp
COPY requirements.txt .

# Layer for installed dependencies
# CLI equivalent: docker run --name temp -w /app temp-with-req /bin/bash -c "pip install --no-cache-dir -r requirements.txt"
#                docker commit temp temp-with-deps
#                docker rm temp
RUN pip install --no-cache-dir -r requirements.txt

# Layer for application code
# CLI equivalent: docker create --name temp -w /app temp-with-deps
#                docker cp . temp:/app/
#                docker commit temp temp-with-code
#                docker rm temp
COPY . .

# Metadata for documentation
# CLI equivalent: docker create --name temp --expose 5000 -w /app temp-with-code
#                docker commit temp temp-with-expose
#                docker rm temp
EXPOSE 5000

# Environment variable metadata
# CLI equivalent: docker create --name temp -e FLASK_APP=app.py -e FLASK_ENV=production -w /app temp-with-expose
#                docker commit temp temp-final
#                docker rm temp
ENV FLASK_APP=app.py
ENV FLASK_ENV=production

# Default command metadata
# CLI equivalent: Sets default runtime command - executes when running:
#                docker run todo-app:latest
CMD ["python", "app.py"]
```

2. Create the templates directory and file:
```bash
mkdir templates
# Then create the index.html file inside the templates directory
```

3. Build the Docker image:
```bash
docker build -t todo-app:latest .
```

4. Run the container:
```bash
docker run -p 5000:5000 todo-app:latest
```

5. Test the Todo application by visiting http://localhost:5000 in your browser.

## Additional Commands for Development:

```bash
# Run in detached mode
docker run -d -p 5000:5000 --name my-todo-app todo-app:latest

# View logs
docker logs my-todo-app

# Stop the container
docker stop my-todo-app

# Remove the container
docker rm my-todo-app

# Run with volume mounting for development (auto-reload changes)
docker run -p 5000:5000 -v $(pwd):/app todo-app:latest
```

=======================================================================================
# Lesson 2: Layering & Optimization

## Understanding Image Layers & Caching

Docker images are built in layers. Each instruction in a Dockerfile creates a new layer that contains the filesystem changes resulting from that instruction. When you rebuild an image, Docker reuses unchanged layers from cache, which speeds up the build process significantly.

```dockerfile
# Layer 1: Base image layer
FROM node:14-alpine

# Layer 2: Creating or changing working directory
WORKDIR /app

# Layer 3: Adding package.json file
COPY package.json .

# Layer 4: Installing node modules
RUN npm install

# Layer 5: Adding application code
COPY . .

# Layer 6: Metadata layer (no filesystem changes)
CMD ["npm", "start"]
```

### How Caching Works

When Docker builds an image, it checks if each instruction has changed:
- If unchanged, it reuses the cached layer
- If changed, it rebuilds that layer and all subsequent layers

Example caching behavior:
1. Change `package.json` → Rebuilds from Layer 3 onwards
2. Change application code only → Rebuilds from Layer 5 onwards
3. Add new base image → Rebuilds everything

## Best Practices for Small & Efficient Images

### 1. Use Smaller Base Images

```dockerfile
# Bad practice: Using full image
FROM node:14
# 943MB base image size

# Better practice: Using alpine variant
FROM node:14-alpine
# 117MB base image size
```

### 2. Combine RUN Commands

# Efficient: Single RUN layer with cleanup
RUN apt-get update && \
    apt-get install -y curl && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*
```

### 3. Order Instructions by Change Frequency

```dockerfile
# Ordered from least to most frequently changed
COPY package.json .
RUN npm install
COPY . .  # Application code changes most frequently
```

### 4. Use Multi-stage Builds

```dockerfile
# Build stage
FROM node:14 AS builder
WORKDIR /app
COPY package.json .
RUN npm install
COPY . .
RUN npm run build

# Production stage
FROM nginx:alpine
COPY --from=builder /app/dist /usr/share/nginx/html
```

## Using .dockerignore to Exclude Files

The `.dockerignore` file works similarly to `.gitignore`, letting you specify patterns for files and directories that should be excluded from the build context.

Example `.dockerignore`:
```
node_modules
npm-debug.log
.git
.env
*.md
tests
```

Benefits:
- Reduces build context size, making `docker build` faster
- Prevents unnecessary cache invalidation
- Avoids including sensitive files

## Common Pitfalls

### 1. Cache Busting
If any file changes, npm install runs again even if `package.json` didn't change.
```dockerfile
COPY package.json package-lock.json ./
RUN npm install
COPY . .
```

### 2. Not Removing Unnecessary Files
```dockerfile
RUN apt-get update && \
    apt-get install -y python && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*
```

### 3. Installing Development Dependencies

```dockerfile
RUN npm install --production
```
=========================================
# Initial Dockerfile (with issues identified)
FROM node:14
WORKDIR /app
COPY . .
RUN npm install
EXPOSE 3000
CMD ["node", "index.js"]

# Optimized Dockerfile (corrected version)
# Build stage
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files first (for better layer caching)
COPY package*.json ./

# Install ALL dependencies (including devDependencies for build)
RUN npm ci

# Copy source code
COPY . .

# If you have a build step, add it here
# RUN npm run build

# Production stage
FROM node:18-alpine AS production

# Create non-root user for security
RUN addgroup -g 1000 appuser && \
    adduser -u 1000 -G appuser -s /bin/sh -D appuser

# Set working directory
WORKDIR /app

# Change ownership of the app directory to appuser
RUN chown -R appuser:appuser /app

# Copy package files
COPY --chown=appuser:appuser package*.json ./

# Install only production dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy application code from builder stage
COPY --from=builder --chown=appuser:appuser /app/index.js ./
# Copy any other necessary files
COPY --from=builder --chown=appuser:appuser /app/package.json ./

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 3000

# Add health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })" || exit 1

# Start the application
CMD ["node", "index.js"]
===============================================================
# Corrected Mini Project: Create a Lightweight Node.js Container

## Project: RESTful API for a Task Manager



##  Project Files:

### package.json
```json
{
  "name": "task-api",
  "version": "1.0.0",
  "description": "Lightweight Task API",
  "main": "index.js",
  "scripts": {
    "start": "node index.js",
    "dev": "nodemon index.js",
    "test": "jest"
  },
  "dependencies": {
    "express": "^4.18.2",
    "cors": "^2.8.5"
  },
  "devDependencies": {
    "nodemon": "^3.0.1",
    "jest": "^29.7.0",
    "supertest": "^6.3.3"
  },
  "jest": {
    "testEnvironment": "node"
  }
}
```

### index.js 
```javascript
const express = require('express');
const cors = require('cors');

const app = express();
const PORT = process.env.PORT || 3000;

// In-memory storage
let tasks = [];
let nextId = 1;

app.use(cors());
app.use(express.json({ limit: '10mb' }));

// Error handling middleware for invalid JSON
app.use((error, req, res, next) => {
  if (error instanceof SyntaxError && error.status === 400 && 'body' in error) {
    return res.status(400).json({ error: 'Invalid JSON format' });
  }
  next();
});

// Health check endpoint
app.get('/health', (req, res) => {
  res.status(200).json({ status: 'OK', timestamp: new Date().toISOString() });
});

// Get all tasks
app.get('/tasks', (req, res) => {
  res.json(tasks);
});

// Get a single task
app.get('/tasks/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const task = tasks.find(task => task.id === id);
  
  if (!task) {
    return res.status(404).json({ error: 'Task not found' });
  }
  
  res.json(task);
});

// Add a task
app.post('/tasks', (req, res) => {
  const { title, description } = req.body;
  
  if (!title || typeof title !== 'string' || title.trim() === '') {
    return res.status(400).json({ error: 'Title is required and must be a non-empty string' });
  }
  
  const newTask = {
    id: nextId++,
    title: title.trim(),
    description: description ? description.trim() : '',
    completed: false,
    createdAt: new Date().toISOString()
  };
  
  tasks.push(newTask);
  res.status(201).json(newTask);
});

// Update a task
app.put('/tasks/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const { title, description, completed } = req.body;
  const taskIndex = tasks.findIndex(task => task.id === id);
  
  if (taskIndex === -1) {
    return res.status(404).json({ error: 'Task not found' });
  }
  
  const task = tasks[taskIndex];
  
  if (title !== undefined) {
    if (typeof title !== 'string' || title.trim() === '') {
      return res.status(400).json({ error: 'Title must be a non-empty string' });
    }
    task.title = title.trim();
  }
  
  if (description !== undefined) {
    task.description = description ? description.trim() : '';
  }
  
  if (completed !== undefined) {
    if (typeof completed !== 'boolean') {
      return res.status(400).json({ error: 'Completed must be a boolean' });
    }
    task.completed = completed;
  }
  
  task.updatedAt = new Date().toISOString();
  res.json(task);
});

// Delete a task
app.delete('/tasks/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const index = tasks.findIndex(task => task.id === id);
  
  if (index === -1) {
    return res.status(404).json({ error: 'Task not found' });
  }
  
  tasks.splice(index, 1);
  res.status(204).send();
});

// 404 handler for unknown routes
app.use('*', (req, res) => {
  res.status(404).json({ error: 'Route not found' });
});

// Global error handler
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Internal server error' });
});

const server = app.listen(PORT, '0.0.0.0', () => {
  console.log(`Server running on port ${PORT}`);
  console.log(`Health check available at http://localhost:${PORT}/health`);
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('SIGTERM received, shutting down gracefully');
  server.close(() => {
    console.log('Process terminated');
  });
});

module.exports = app;
```

### tests/app.test.js 
```javascript
const request = require('supertest');
const app = require('../index');

describe('Task API', () => {
  beforeEach(() => {
    // Reset tasks before each test
    const tasks = require('../index');
  });

  describe('GET /health', () => {
    test('should return health status', async () => {
      const response = await request(app).get('/health');
      expect(response.status).toBe(200);
      expect(response.body.status).toBe('OK');
    });
  });

  describe('GET /tasks', () => {
    test('should return empty array initially', async () => {
      const response = await request(app).get('/tasks');
      expect(response.status).toBe(200);
      expect(Array.isArray(response.body)).toBe(true);
    });
  });

  describe('POST /tasks', () => {
    test('should create a new task', async () => {
      const newTask = {
        title: 'Test Task',
        description: 'Test Description'
      };

      const response = await request(app)
        .post('/tasks')
        .send(newTask);

      expect(response.status).toBe(201);
      expect(response.body.title).toBe(newTask.title);
      expect(response.body.description).toBe(newTask.description);
      expect(response.body.completed).toBe(false);
      expect(response.body.id).toBeDefined();
    });

    test('should return error for missing title', async () => {
      const response = await request(app)
        .post('/tasks')
        .send({ description: 'Test Description' });

      expect(response.status).toBe(400);
      expect(response.body.error).toContain('Title is required');
    });
  });

  describe('PUT /tasks/:id', () => {
    test('should update an existing task', async () => {
      // First create a task
      const createResponse = await request(app)
        .post('/tasks')
        .send({ title: 'Original Title' });

      const taskId = createResponse.body.id;

      // Then update it
      const updateResponse = await request(app)
        .put(`/tasks/${taskId}`)
        .send({ 
          title: 'Updated Title',
          completed: true 
        });

      expect(updateResponse.status).toBe(200);
      expect(updateResponse.body.title).toBe('Updated Title');
      expect(updateResponse.body.completed).toBe(true);
    });
  });

  describe('DELETE /tasks/:id', () => {
    test('should delete an existing task', async () => {
      // First create a task
      const createResponse = await request(app)
        .post('/tasks')
        .send({ title: 'Task to Delete' });

      const taskId = createResponse.body.id;

      // Then delete it
      const deleteResponse = await request(app)
        .delete(`/tasks/${taskId}`);

      expect(deleteResponse.status).toBe(204);

      // Verify it's deleted
      const getResponse = await request(app)
        .get(`/tasks/${taskId}`);

      expect(getResponse.status).toBe(404);
    });
  });
});
```

### .gitignore 
```
# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# IDE files
.vscode/
.idea/
*.swp
*.swo

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Logs
logs
*.log

# Docker
.dockerignore
```

### .dockerignore 
```
node_modules
npm-debug.log*
yarn-debug.log*
yarn-error.log*
tests
coverage
.git
.gitignore
Dockerfile*
.dockerignore
README.md
.env
.vscode
.idea
*.swp
*.swo
.DS_Store
```

### Dockerfile 
```dockerfile
# Build stage
FROM node:18-alpine AS builder

# Install curl for health checks
RUN apk add --no-cache curl

WORKDIR /app

# Copy package files first to leverage caching
COPY package*.json ./

# Install only production dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy application code
COPY index.js ./

# Runtime stage
FROM node:18-alpine

# Install curl for health checks
RUN apk add --no-cache curl

# Set production environment
ENV NODE_ENV=production

# Create non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 --ingroup nodejs nodeuser

# Set working directory
WORKDIR /app

# Copy from builder stage
COPY --from=builder --chown=nodeuser:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nodeuser:nodejs /app/index.js ./
COPY --from=builder --chown=nodeuser:nodejs /app/package*.json ./

# Use non-root user
USER nodeuser

# Expose API port
EXPOSE 3000

# Health check using curl instead of wget
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/health || exit 1

# Start application
CMD ["node", "index.js"]
```

## Building and Running (Updated):

```bash
# Build the image
docker build -t task-api:optimized .

# Check image size
docker images task-api:optimized

# Run the container
docker run -d -p 3000:3000 --name task-api task-api:optimized

# Test the API
curl -X POST -H "Content-Type: application/json" -d '{"title":"Learn Docker","description":"Master containerization"}' http://localhost:3000/tasks

curl http://localhost:3000/tasks

curl http://localhost:3000/health

# Update a task
curl -X PUT -H "Content-Type: application/json" -d '{"completed":true}' http://localhost:3000/tasks/1

# Run tests
npm test
```

