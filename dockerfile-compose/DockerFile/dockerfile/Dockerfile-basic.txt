# Lesson 1: Introduction to Dockerfile

## What is a Dockerfile?

A Dockerfile is a text file containing instructions that Docker uses to automatically build an image. Think of it as a recipe or blueprint that specifies all the components and steps needed to create a containerized environment for your application.

Each instruction in a Dockerfile creates a layer in the image, allowing for efficient caching and rebuilding. This layered approach is fundamental to Docker's efficiency.

## Basic Dockerfile Syntax with Docker CLI Equivalents

### FROM
```dockerfile
FROM python:3.9-slim
```

**Layer created:** Base image layer
**Docker CLI equivalent:**
```bash
# There's no direct CLI equivalent as this initializes the build process
# The closest would be pulling the image:
docker pull python:3.9-slim
```

### RUN
```dockerfile
RUN apt-get update && apt-get install -y curl
```

**Layer created:** Filesystem changes from command execution
**Docker CLI equivalent:**
```bash
# Create a container, run the command, then commit changes to a new image
docker run --name temp python:3.9-slim apt-get update && apt-get install -y curl
docker commit temp my-image:latest
docker rm temp
```

### CMD
```dockerfile
CMD ["python", "app.py"]
```

**Layer created:** Metadata layer (not a filesystem layer)
**Docker CLI equivalent:**
```bash
# Set the default command when running a container
docker run python:3.9-slim python app.py
```

### COPY
```dockerfile
COPY app.py /app/
```

**Layer created:** Files added to the filesystem
**Docker CLI equivalent:**
```bash
# Create a container, copy files into it, then commit changes
docker create --name temp python:3.9-slim
docker cp app.py temp:/app/
docker commit temp my-image:latest
docker rm temp
```

### WORKDIR
```dockerfile
WORKDIR /app
```

**Layer created:** Metadata layer (potentially filesystem layer if directory doesn't exist)
**Docker CLI equivalent:**
```bash
# Create a container with working directory, then commit
docker create --name temp -w /app python:3.9-slim
docker commit temp my-image:latest
docker rm temp
```

## Creating Your First Dockerfile

```dockerfile
# Use Python 3.9 as the base image
# CLI equivalent: docker pull python:3.9-slim
FROM python:3.9-slim

# Set the working directory inside the container
# CLI equivalent: docker create --name temp -w /app python:3.9-slim
WORKDIR /app

# Copy requirements file
# CLI equivalent: docker cp requirements.txt temp:/app/
COPY requirements.txt .

# Install dependencies
# CLI equivalent: docker run --name temp python:3.9-slim pip install -r requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

# Copy the application code
# CLI equivalent: docker cp . temp:/app/
COPY . .

# Tell Docker the container will listen on port 5000 (documentation only)
# CLI equivalent: None (purely informational)
EXPOSE 5000

# Command to run when container starts
# CLI equivalent: docker run python:3.9-slim python app.py
CMD ["python", "app.py"]
```

## Building an Image

```bash
docker build -t hello-flask:latest .
```

This command:
- Reads the Dockerfile in the current directory
- Processes each instruction in order
- Creates a new layer for each instruction that modifies the filesystem
- Tags the final image as "hello-flask:latest"

## Running a Container from an Image

```bash
docker run -p 5000:5000 hello-flask:latest
```

This command:
- Creates a new container from the hello-flask image
- Maps port 5000 from the container to port 5000 on your host
- Starts the container with the default command specified in the CMD instruction

## Tagging Images

```bash
docker tag hello-flask:latest username/hello-flask:v1.0
```

This command:
- Creates a new tag (username/hello-flask:v1.0) that refers to the same image as hello-flask:latest
- Useful for organizing images and preparing them for pushing to registries

## Hands-on Demo: Write a basic Dockerfile for a Flask App

1. Create the following files in a new directory:

**app.py**:
```python
from flask import Flask

app = Flask(__name__)

@app.route('/')
def hello():
    return "Hello from Flask in Docker!"

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
```

**requirements.txt**:
```
flask==2.0.1
```

**Dockerfile**:
```dockerfile
# Base image layer
# CLI equivalent: docker pull python:3.9-slim
FROM python:3.9-slim

# Working directory layer (if it doesn't exist)
# CLI equivalent: docker create --name temp -w /app python:3.9-slim
WORKDIR /app

# Layer for requirements.txt file
# CLI equivalent: docker cp requirements.txt temp:/app/
COPY requirements.txt .

# Layer for installed dependencies
# CLI equivalent: docker run --name temp -w /app python:3.9-slim pip install -r requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

# Layer for application code
# CLI equivalent: docker cp . temp:/app/
COPY . .

# Metadata for documentation
# No CLI equivalent (purely informational)
EXPOSE 5000

# Default command metadata
# CLI equivalent: docker run -w /app python:3.9-slim python app.py
CMD ["python", "app.py"]
2. Build the Docker image:
docker build -t flask-demo:latest .
3. Run the container:
docker run -p 5000:5000 flask-demo:latest
4. Test the application by visiting http://localhost:5000 in your browser.

## Mini Project: Dockerize a To-Do List App with Flask

1. Create a new project directory with the following files:

**app.py**:
```python
from flask import Flask, render_template, request, redirect, url_for

app = Flask(__name__)

# Simple in-memory storage for tasks
tasks = []

@app.route('/')
def index():
    return render_template('index.html', tasks=tasks)

@app.route('/add', methods=['POST'])
def add():
    task = request.form.get('task')
    if task:
        tasks.append(task)
    return redirect(url_for('index'))

@app.route('/delete/<int:task_id>')
def delete(task_id):
    if 0 <= task_id < len(tasks):
        tasks.pop(task_id)
    return redirect(url_for('index'))

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
```

**templates/index.html**:
```html
<!DOCTYPE html>
<html>
<head>
    <title>Flask To-Do App</title>
    <style>
        body { font-family: Arial, sans-serif; max-width: 500px; margin: 0 auto; padding: 20px; }
        ul { list-style-type: none; padding: 0; }
        li { margin: 10px 0; padding: 10px; background-color: #f5f5f5; display: flex; justify-content: space-between; }
        form { margin: 20px 0; display: flex; }
        input[type="text"] { flex-grow: 1; padding: 10px; margin-right: 10px; }
        button { padding: 10px 15px; background-color: #4CAF50; color: white; border: none; cursor: pointer; }
        a { color: #f44336; text-decoration: none; }
    </style>
</head>
<body>
    <h1>To-Do List</h1>
    
    <form action="/add" method="post">
        <input type="text" name="task" placeholder="Add a new task" required>
        <button type="submit">Add</button>
    </form>
    
    <ul>
        {% for task in tasks %}
        <li>
            {{ task }}
            <a href="/delete/{{ loop.index0 }}">Delete</a>
        </li>
        {% endfor %}
    </ul>
</body>
</html>
```

**requirements.txt**:
```
flask==2.0.1
```

**Dockerfile**:
```dockerfile
# Base image layer
# CLI equivalent: docker pull python:3.9-slim
FROM python:3.9-slim

# Working directory layer
# CLI equivalent: docker create --name temp -w /app python:3.9-slim
WORKDIR /app

# Layer for requirements.txt
# CLI equivalent: docker cp requirements.txt temp:/app/
COPY requirements.txt .

# Layer for installed dependencies
# CLI equivalent: docker run --name temp -w /app python:3.9-slim pip install -r requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

# Layer for application code
# CLI equivalent: docker cp . temp:/app/
COPY . .

# Metadata for documentation
# No CLI equivalent (purely informational)
EXPOSE 5000

# Environment variable metadata
# CLI equivalent: docker run -e FLASK_APP=app.py -e FLASK_ENV=production python:3.9-slim
ENV FLASK_APP=app.py
ENV FLASK_ENV=production

# Default command metadata
# CLI equivalent: docker run -w /app python:3.9-slim python app.py
CMD ["python", "app.py"]
```

2. Create the templates directory:
```bash
mkdir templates
```

3. Build the Docker image:
```bash
docker build -t todo-app:latest .
```

4. Run the container:
```bash
docker run -p 5000:5000 todo-app:latest
```

5. Test the Todo application by visiting http://localhost:5000 in your browser.

This mini-project demonstrates:
- Creating a more complex Flask application with templating
- Organizing files in directories
- Setting environment variables in the Dockerfile
- Building and running a complete web application in a container

Each layer in the Dockerfile corresponds to specific operations that would require multiple CLI commands to achieve manually, highlighting the efficiency and reproducibility that Dockerfiles provide.

=======================================================================================
# Lesson 2: Layering & Optimization

## Understanding Image Layers & Caching

Docker images are built in layers. Each instruction in a Dockerfile creates a new layer that contains the filesystem changes resulting from that instruction. When you rebuild an image, Docker reuses unchanged layers from cache, which speeds up the build process significantly.

```dockerfile
FROM node:14-alpine
# Layer 1: Base image layer
# CLI equivalent: docker pull node:14-alpine

WORKDIR /app
# Layer 2: Creating or changing working directory
# CLI equivalent: docker create --name temp node:14-alpine
#                 docker exec temp mkdir -p /app
#                 docker commit temp temp-image

COPY package.json .
# Layer 3: Adding package.json file
# CLI equivalent: docker cp package.json temp:/app/
#                 docker commit temp temp-image

RUN npm install
# Layer 4: Installing node modules
# CLI equivalent: docker run --name temp temp-image npm install
#                 docker commit temp temp-image

COPY . .
# Layer 5: Adding application code
# CLI equivalent: docker cp . temp:/app/
#                 docker commit temp temp-image

CMD ["npm", "start"]
# Layer 6: Metadata layer (no filesystem changes)
# CLI equivalent: None directly (just metadata for docker run)
```

### How Caching Works

When Docker builds an image, it checks if each instruction has changed:
- If unchanged, it reuses the cached layer
- If changed, it rebuilds that layer and all subsequent layers

Example caching behavior:
1. Change `package.json` → Rebuilds from Layer 3 onwards
2. Change application code only → Rebuilds from Layer 5 onwards
3. Add new base image → Rebuilds everything

## Best Practices for Small & Efficient Images

### 1. Use Smaller Base Images

```dockerfile
# Bad practice: Using full image
FROM node:14
# 943MB base image size

# Better practice: Using alpine variant
FROM node:14-alpine
# 117MB base image size
```

### 2. Combine RUN Commands

```dockerfile
# Inefficient: Multiple RUN layers
# CLI equivalent: Three separate docker run + docker commit operations
RUN apt-get update
RUN apt-get install -y curl
RUN apt-get clean

# Efficient: Single RUN layer with cleanup
# CLI equivalent: Single docker run + docker commit operation
RUN apt-get update && \
    apt-get install -y curl && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*
```

### 3. Order Instructions by Change Frequency

```dockerfile
# Ordered from least to most frequently changed
COPY package.json .
RUN npm install
COPY . .  # Application code changes most frequently
```

### 4. Use Multi-stage Builds

```dockerfile
# Build stage
FROM node:14 AS builder
# CLI equivalent: docker pull node:14
#                 docker tag node:14 builder
WORKDIR /app
COPY package.json .
RUN npm install
COPY . .
RUN npm run build

# Production stage
FROM nginx:alpine
# CLI equivalent: docker pull nginx:alpine
COPY --from=builder /app/dist /usr/share/nginx/html
# CLI equivalent: No direct CLI equivalent for cross-image copy
#                 (Would require intermediate container and volume)
```

## Using .dockerignore to Exclude Files

The `.dockerignore` file works similarly to `.gitignore`, letting you specify patterns for files and directories that should be excluded from the build context.

Example `.dockerignore`:
```
node_modules
npm-debug.log
.git
.env
*.md
tests
```

Benefits:
- Reduces build context size, making `docker build` faster
- Prevents unnecessary cache invalidation
- Avoids including sensitive files

## Common Pitfalls

### 1. Cache Busting

Problem:
```dockerfile
COPY . .
RUN npm install
```

If any file changes, npm install runs again even if `package.json` didn't change.

Solution:
```dockerfile
COPY package.json package-lock.json ./
RUN npm install
COPY . .
```

### 2. Not Removing Unnecessary Files

Problem:
```dockerfile
RUN apt-get update && apt-get install -y python
```

Solution:
```dockerfile
RUN apt-get update && \
    apt-get install -y python && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*
```

### 3. Installing Development Dependencies

Problem:
```dockerfile
RUN npm install
```

Solution:
```dockerfile
RUN npm install --production
```

## Hands-on Demo: Optimize an Express.js App Dockerfile

### Initial Dockerfile:

```dockerfile
FROM node:14
# Layer 1: Base image (large)
# CLI equivalent: docker pull node:14

WORKDIR /app
# Layer 2: Set working directory
# CLI equivalent: docker create --name temp node:14
#                 docker exec temp mkdir -p /app
#                 docker commit temp temp-image

COPY . .
# Layer 3: Copy all files
# CLI equivalent: docker cp . temp:/app/
#                 docker commit temp temp-image

RUN npm install
# Layer 4: Install dependencies
# CLI equivalent: docker run --name temp temp-image npm install
#                 docker commit temp temp-image

EXPOSE 3000
# Layer 5: Metadata only
# CLI equivalent: None (documentation only)

CMD ["node", "index.js"]
# Layer 6: Metadata only
# CLI equivalent: None (just documentation for docker run)
```

### Optimized Dockerfile:

```dockerfile
# Build stage
FROM node:14-alpine AS builder
# Layer 1: Smaller base image
# CLI equivalent: docker pull node:14-alpine

WORKDIR /app
# Layer 2: Set working directory
# CLI equivalent: docker create --name temp node:14-alpine
#                 docker exec temp mkdir -p /app
#                 docker commit temp temp-image

COPY package*.json ./
# Layer 3: Copy only package files
# CLI equivalent: docker cp package*.json temp:/app/
#                 docker commit temp temp-image

RUN npm ci --production
# Layer 4: Install dependencies in CI mode (faster and more reliable)
# CLI equivalent: docker run --name temp temp-image npm ci --production
#                 docker commit temp temp-image

COPY . .
# Layer 5: Copy application code
# CLI equivalent: docker cp . temp:/app/
#                 docker commit temp temp-image

# Production stage
FROM node:14-alpine
# Layer 6: Fresh base image for production
# CLI equivalent: docker pull node:14-alpine

# Set non-root user for security
RUN addgroup -g 1000 appuser && \
    adduser -u 1000 -G appuser -s /bin/sh -D appuser
# Layer 7: Create non-root user
# CLI equivalent: docker run --name temp node:14-alpine addgroup -g 1000 appuser && adduser -u 1000 -G appuser -s /bin/sh -D appuser
#                 docker commit temp temp-image

WORKDIR /app
# Layer 8: Set working directory
# CLI equivalent: docker create --name temp temp-image
#                 docker exec temp mkdir -p /app
#                 docker commit temp temp-image

# Copy only production dependencies and app code
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/index.js ./
COPY --from=builder /app/package.json ./
# Layer 9: Copy files from builder stage
# CLI equivalent: No direct CLI equivalent for cross-image copy
#                 (Would require intermediate containers and volumes)

USER appuser
# Layer 10: Switch to non-root user
# CLI equivalent: No direct equivalent (would be part of docker run)

EXPOSE 3000
# Layer 11: Metadata only
# CLI equivalent: None (documentation only)

CMD ["node", "index.js"]
# Layer 12: Metadata only
# CLI equivalent: None (just documentation for docker run)
```

## Mini Project: Create a Lightweight Node.js Container

### Project: RESTful API for a Task Manager

1. Create the project files:

**package.json**:
```json
{
  "name": "task-api",
  "version": "1.0.0",
  "description": "Lightweight Task API",
  "main": "index.js",
  "scripts": {
    "start": "node index.js",
    "dev": "nodemon index.js",
    "test": "jest"
  },
  "dependencies": {
    "express": "^4.17.1",
    "cors": "^2.8.5"
  },
  "devDependencies": {
    "nodemon": "^2.0.15",
    "jest": "^27.4.5"
  }
}
```

**index.js**:
```javascript
const express = require('express');
const cors = require('cors');

const app = express();
const PORT = process.env.PORT || 3000;

// In-memory storage
const tasks = [];

app.use(cors());
app.use(express.json());

// Get all tasks
app.get('/tasks', (req, res) => {
  res.json(tasks);
});

// Add a task
app.post('/tasks', (req, res) => {
  const { title, description } = req.body;
  
  if (!title) {
    return res.status(400).json({ error: 'Title is required' });
  }
  
  const newTask = {
    id: tasks.length + 1,
    title,
    description: description || '',
    completed: false,
    createdAt: new Date()
  };
  
  tasks.push(newTask);
  res.status(201).json(newTask);
});

// Delete a task
app.delete('/tasks/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const index = tasks.findIndex(task => task.id === id);
  
  if (index === -1) {
    return res.status(404).json({ error: 'Task not found' });
  }
  
  tasks.splice(index, 1);
  res.status(204).send();
});

app.listen(PORT, '0.0.0.0', () => {
  console.log(`Server running on port ${PORT}`);
});
```

**tests/app.test.js**:
```javascript
// Simple test file to demonstrate dev dependencies
test('2 + 2 = 4', () => {
  expect(2 + 2).toBe(4);
});
```

**.dockerignore**:
```
node_modules
npm-debug.log
tests
.git
.gitignore
Dockerfile
.dockerignore
README.md
```

**Dockerfile**:
```dockerfile
# Build stage
FROM node:16-alpine AS builder
# Layer 1: Small base image for building
# CLI equivalent: docker pull node:16-alpine

WORKDIR /app
# Layer 2: Set working directory
# CLI equivalent: docker create --name temp node:16-alpine
#                 docker exec temp mkdir -p /app
#                 docker commit temp temp-image

# Copy package files first to leverage caching
COPY package*.json ./
# Layer 3: Copy only package files
# CLI equivalent: docker cp package*.json temp:/app/
#                 docker commit temp temp-image

# Install only production dependencies
RUN npm ci --only=production
# Layer 4: Install dependencies
# CLI equivalent: docker run --name temp temp-image npm ci --only=production
#                 docker commit temp temp-image

# Copy application code
COPY . .
# Layer 5: Copy application code
# CLI equivalent: docker cp . temp:/app/
#                 docker commit temp temp-image

# Runtime stage
FROM node:16-alpine
# Layer 6: Fresh base image for production
# CLI equivalent: docker pull node:16-alpine

# Set production environment
ENV NODE_ENV production
# Layer 7: Set environment variable
# CLI equivalent: docker run -e NODE_ENV=production node:16-alpine

# Create non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 --ingroup nodejs nodeuser
# Layer 8: Create non-root user
# CLI equivalent: docker run --name temp node:16-alpine addgroup --system --gid 1001 nodejs && adduser --system --uid 1001 --ingroup nodejs nodeuser
#                 docker commit temp temp-image

# Set working directory
WORKDIR /app
# Layer 9: Set working directory
# CLI equivalent: docker create --name temp temp-image
#                 docker exec temp mkdir -p /app
#                 docker commit temp temp-image

# Copy from builder stage
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/index.js ./
COPY --from=builder /app/package.json ./
# Layer 10: Copy files from builder
# CLI equivalent: No direct CLI equivalent for cross-image copy
#                 (Would require intermediate containers and volumes)

# Use non-root user
USER nodeuser
# Layer 11: Switch to non-root user
# CLI equivalent: No direct equivalent (would be part of docker run command)

# Expose API port
EXPOSE 3000
# Layer 12: Metadata only
# CLI equivalent: None (documentation only)

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3000/tasks || exit 1
# Layer 13: Metadata only
# CLI equivalent: None (would be part of docker run with --health-* flags)

# Start application
CMD ["node", "index.js"]
# Layer 14: Metadata only
# CLI equivalent: None (would be part of docker run command)
```

### Building and Running:

```bash
# Build the image
docker build -t task-api:optimized .

# Check image size
docker images task-api:optimized

# Run the container
docker run -d -p 3000:3000 --name task-api task-api:optimized

# Test the API
curl -X POST -H "Content-Type: application/json" -d '{"title":"Learn Docker"}' http://localhost:3000/tasks
curl http://localhost:3000/tasks
```

### Benefits of this Optimized Approach:

1. **Small Image Size**: Using Alpine and multi-stage builds reduces image size significantly
2. **Security**: Running as non-root user enhances security
3. **Caching**: Proper layering enables efficient caching of dependencies
4. **Production-Ready**: Environment variables set for production
5. **Health Checking**: Built-in health check for monitoring
6. **Faster Builds**: Development files excluded via .dockerignore

By implementing these optimizations, we've created a lightweight, secure, and production-ready Node.js container that follows Docker best practices.