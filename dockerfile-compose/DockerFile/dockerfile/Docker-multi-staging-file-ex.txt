# =============================================================================
# ENHANCED NODE.JS MULTI-STAGE DOCKERFILE WITH LINE-BY-LINE COMMENTS
# =============================================================================

# -----------------------------------------------------------------------------
# STAGE 1: BASE LAYER
# Contains: FROM, LABEL, ARG, ENV, SHELL, WORKDIR, RUN
# -----------------------------------------------------------------------------
# Use Node.js 20 slim image (LTS) as the base and name this stage "base"
FROM node:20-slim AS base

# Add comprehensive metadata to the image for identification and management
LABEL maintainer="farajassulai@gmail.com" \                         # Contact email for the Docker image maintainer
      environment="production" \                                      # Indicates this image is designed for production use
      description="Secure Node.js webserver with non-root user" \    # Brief description of what this image contains
      created_date="2025-06-15" \                                   # Date when this Dockerfile was created
      app_name="node_webapp" \                                      # Name identifier for the application
      app_version="1.0.0" \                                         # Version number of the application
      base_image="node:20-slim" \                                   # Record which base image is being used
      dockerfile_version="2.0"                                      # Version of this Dockerfile for tracking changes

# Define build-time arguments with sensible defaults that can be overridden during build
ARG NODEVER=20                    # Node.js major version number to use (default: 20)
ARG USER_ID=1001                  # Numeric user ID for the non-root user (1001 avoids conflicts)
ARG USER_NAME=nodeuser            # Username for the non-root user account
ARG GROUP_ID=1001                 # Numeric group ID for the user's primary group
ARG GROUP_NAME=nodegrp            # Name for the user's primary group
ARG APP_PORT=3000                 # Port number the application will listen on
ARG HOST=0.0.0.0                  # Host address to bind to (0.0.0.0 allows external connections)
ARG APP_DIR=/app                  # Primary directory where the application will be installed
ARG MOUNT1=/app/data              # First mount point for persistent data storage
ARG MOUNT2=/app/logs              # Second mount point for application log files
ARG LOCAL_URL=http://localhost:3000/health  # URL endpoint for health check monitoring

# Set environment variables that will be available during container runtime
ENV NODE_VERSION=${NODEVER} \     # Make Node.js version available to the application
    PORT=${APP_PORT} \            # Standard PORT environment variable for the application
    USER_ID=${USER_ID} \          # User ID available for runtime scripts
    USER_NAME=${USER_NAME} \      # Username available for runtime scripts
    GROUP_ID=${GROUP_ID} \        # Group ID available for runtime scripts
    GROUP_NAME=${GROUP_NAME} \    # Group name available for runtime scripts
    APP_PORT=${APP_PORT} \        # Application-specific port variable
    HOST=${HOST} \                # Host binding address for the application
    APP_DIR=${APP_DIR} \          # Application directory path for runtime use
    MOUNT1=${MOUNT1} \            # First mount point path for runtime access
    MOUNT2=${MOUNT2} \            # Second mount point path for runtime access
    LOCAL_URL=${LOCAL_URL} \      # Health check URL for monitoring scripts
    NODE_ENV=production \         # Set Node.js environment to production mode
    NPM_CONFIG_UPDATE_NOTIFIER=false \  # Disable npm update notifications to reduce noise
    NPM_CONFIG_FUND=false \       # Disable npm funding messages during operations
    DEBIAN_FRONTEND=noninteractive  # Prevent interactive prompts during package installation

# Configure the shell interpreter for all subsequent RUN commands with error handling
SHELL ["/bin/bash", "-euo", "pipefail", "-c"]  # Use bash with: -e (exit on error), -u (error on undefined vars), -o pipefail (pipe failures cause exit)

# Set the working directory where all subsequent commands will be executed
WORKDIR ${APP_DIR}                # Change to the application directory (/app)

# Create user, install dependencies, and set up directories in a single layer to minimize image size
# hadolint ignore=DL3008 - We intentionally don't pin package versions for system packages
RUN apt-get update && \           # Update the package repository lists from Debian repositories
    apt-get install -y --no-install-recommends \  # Install packages without recommended dependencies to keep image small
        curl \                    # HTTP client for health checks and external API calls
        ca-certificates \         # SSL/TLS certificate authority certificates for secure connections
        dumb-init \               # Lightweight init system for proper signal handling
        tini && \                 # Alternative init system with zombie process reaping
    # Create directories with proper structure
    mkdir -p ${APP_DIR} ${MOUNT1} ${MOUNT2} /app/tmp /tmp/run && \  # Create all necessary directories with parent directories (-p flag)
    # Create group and user for security (non-root execution)
    groupadd -g ${GROUP_ID} ${GROUP_NAME} && \  # Create a new group with specified numeric ID
    useradd -u ${USER_ID} -m -d ${APP_DIR} -s /bin/bash -g ${GROUP_NAME} ${USER_NAME} && \  # Create user: -u (user ID), -m (create home), -d (home dir), -s (shell), -g (primary group)
    # Set proper ownership and permissions for security
    chown -R ${USER_NAME}:${GROUP_NAME} ${APP_DIR} ${MOUNT1} ${MOUNT2} && \  # Change ownership recursively to the app user
    chmod 755 ${APP_DIR} ${MOUNT1} ${MOUNT2} && \  # Set permissions: owner (read/write/execute), group+others (read/execute)
    chmod 750 /app/tmp && \       # Set more restrictive permissions on temp directory
    # Clean up package cache and temporary files to reduce final image size
    apt-get clean && \            # Clean the apt package cache
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*  # Remove package lists and temporary files

# -----------------------------------------------------------------------------
# STAGE 2: DEPENDENCIES
# Contains: FROM, ARG, ENV, RUN, COPY
# -----------------------------------------------------------------------------
# Start new stage inheriting from the base stage with all its configurations
FROM base AS dependencies

# Build arguments for dependency management that can be passed during build time
ARG NPM_TOKEN                     # Optional token for accessing private npm registries
ARG PRIVATE_REGISTRY              # Optional URL for private npm registry
ARG NODE_ENV=production           # Environment mode for dependency installation

# Environment variables for npm optimization and configuration
ENV NPM_CONFIG_CACHE=/tmp/.npm \  # Set npm cache directory to temporary location for better performance
    NPM_CONFIG_FUND=false \       # Disable npm funding messages to reduce installation noise
    NPM_CONFIG_AUDIT=false \      # Disable automatic security audits during install for faster builds
    NPM_CONFIG_UPDATE_NOTIFIER=false \  # Disable update notifications during npm operations
    NODE_ENV=${NODE_ENV}          # Set the Node.js environment mode for the container

# Install build dependencies in a single layer to minimize image layers
# hadolint ignore=DL3008,DL3009 - System packages don't need version pinning
RUN apt-get update && \           # Refresh package repository information
    apt-get install -y --no-install-recommends \  # Install only essential packages without recommendations
        python3 \                 # Python 3 runtime required for building some native Node.js modules
        make \                    # GNU Make build tool for compiling native dependencies
        g++ \                     # GNU C++ compiler for building native Node.js extensions
        git && \                  # Git version control system for fetching dependencies from repositories
    apt-get clean && \            # Clean package manager cache to reduce image size
    rm -rf /var/lib/apt/lists/*   # Remove package lists to further reduce image size

# Copy only package definition files to leverage Docker's layer caching mechanism
COPY --chown=${USER_NAME}:${GROUP_NAME} package*.json ./  # Copy package.json and package-lock.json with proper ownership
COPY --chown=${USER_NAME}:${GROUP_NAME} yarn.lock* ./     # Copy yarn.lock file if it exists (optional)

# Switch to non-root user for security during dependency installation
USER ${USER_ID}                   # Switch to the created non-root user by ID

# Install dependencies with security and performance optimizations using build cache
RUN --mount=type=cache,target=/tmp/.npm,uid=${USER_ID},gid=${GROUP_ID} \  # Use Docker BuildKit cache mount for npm cache
    npm ci --only=production --no-optional --no-audit --ignore-scripts && \  # Install exact versions from lockfile: production only, no optional deps, no audits, no scripts
    npm cache clean --force       # Clean npm cache after installation to reduce layer size

# -----------------------------------------------------------------------------
# STAGE 3: DEVELOPMENT
# Contains: FROM, ARG, ENV, RUN, COPY, EXPOSE, VOLUME, USER, CMD
# -----------------------------------------------------------------------------
# Start development stage inheriting from the dependencies stage
FROM dependencies AS development

# Development-specific arguments that can be customized at build time
ARG DEBUG_PORT=9229               # Port number for Node.js debugger/inspector

# Development environment variables for debugging and development features
ENV NODE_ENV=development \        # Set Node.js to development mode for better error messages and debugging
    DEBUG=app:* \                 # Enable debug output for application namespace (requires debug module)
    NODE_OPTIONS="--inspect=0.0.0.0:${DEBUG_PORT} --enable-source-maps"  # Node.js runtime options: enable inspector on all interfaces and source map support

# Switch back to root user temporarily for installing development dependencies
USER root                        # Switch to root user for package installation

# Install development dependencies using cached npm for faster builds
RUN --mount=type=cache,target=/tmp/.npm \  # Use BuildKit cache mount for npm operations
    npm ci --include=dev --no-audit  # Install all dependencies including devDependencies, skip security audit for speed

# Copy entire source code with proper ownership for development
COPY --chown=${USER_NAME}:${GROUP_NAME} . ${APP_DIR}  # Copy all project files and set ownership to app user

# Document which ports this container will use for external access
EXPOSE ${APP_PORT} ${DEBUG_PORT}  # Expose application port and debugger port for external connections

# Define mount points for volumes that can persist data and enable development workflows
VOLUME ["${MOUNT1}", "${MOUNT2}", "/app/src", "/app/node_modules"]  # Define volumes for: data persistence, logs, source code hot-reload, and node_modules

# Switch to non-root user for security during container execution
USER ${USER_ID}                   # Switch back to non-root user for running the application

# Use tini for proper signal handling and zombie process prevention
ENTRYPOINT ["tini", "--"]         # Use tini as PID 1 for proper signal forwarding and process cleanup
CMD ["npm", "run", "dev"]         # Default command to run development server (typically with hot reload)

# -----------------------------------------------------------------------------
# STAGE 4: BUILD/COMPILATION
# Contains: FROM, ARG, ENV, RUN
# -----------------------------------------------------------------------------
# Start build stage inheriting from the development stage which has all dependencies
FROM development AS build

# Build-specific arguments for controlling the compilation process
ARG BUILD_TARGET=production       # Target environment for the build process
ARG OPTIMIZE=true                 # Boolean flag to enable build optimizations

# Build environment variables for compilation
ENV NODE_ENV=production \         # Set Node.js to production mode for optimized builds
    BUILD_TARGET=${BUILD_TARGET}  # Make build target available to build scripts

# Build the application using available npm scripts
RUN npm run build 2>/dev/null || echo "No build script found" && \      # Run build script if it exists, or show message
    npm run compile 2>/dev/null || echo "No compile script found"       # Run compile script if it exists, or show message

# Optimize the build for production if optimization is enabled
USER root                         # Switch to root for file system operations
RUN if [ "$OPTIMIZE" = "true" ]; then \  # Check if optimization flag is enabled
        npm prune --production && \       # Remove devDependencies from node_modules to reduce size
        npm cache clean --force && \      # Clean all npm cache to free up space
        rm -rf node_modules/.cache && \   # Remove any cache directories in node_modules
        find . -name "*.map" -type f -delete 2>/dev/null || true && \  # Delete source map files to save space (ignore errors)
        find . -name "*.test.js" -type f -delete 2>/dev/null || true && \  # Remove test files from production build
        find . -name "*.spec.js" -type f -delete 2>/dev/null || true; \    # Remove spec files from production build
    fi

# Restore proper file ownership after root operations
RUN chown -R ${USER_NAME}:${GROUP_NAME} ${APP_DIR}  # Change ownership of all files back to app user

# -----------------------------------------------------------------------------
# STAGE 5: SECURITY SCAN
# Contains: FROM, ARG, RUN
# -----------------------------------------------------------------------------
# Start security scanning stage from the build stage
FROM build AS security

# Security scan configuration arguments
ARG SCAN_ENABLED=true             # Flag to enable or disable security scanning
ARG SEVERITY_THRESHOLD=high       # Minimum severity level for security vulnerabilities to report

# Switch to root user for installing and running security tools
USER root                         # Switch to root for security tool operations

# Enhanced security scanning with multiple tools and output formats
RUN if [ "$SCAN_ENABLED" = "true" ]; then \  # Check if security scanning is enabled
        echo "Running security scans..." && \         # Log start of security scanning
        npm audit --audit-level=${SEVERITY_THRESHOLD} --json > /tmp/audit.json 2>&1 || true && \  # Run npm audit and save JSON output
        if command -v npm-audit-resolver >/dev/null 2>&1; then \  # Check if audit resolver tool is available
            npm-audit-resolver --audit-level=${SEVERITY_THRESHOLD} || true; \  # Run audit resolver if available
        fi && \
        echo "Security scan completed"; \             # Log completion of security scanning
    fi

# -----------------------------------------------------------------------------
# STAGE 6: PRODUCTION
# Contains: FROM, ARG, ENV, COPY, VOLUME, EXPOSE, HEALTHCHECK, USER, ENTRYPOINT, CMD
# -----------------------------------------------------------------------------
# Start production stage from the clean base stage (not from build to keep it minimal)
FROM base AS production

# Production-specific build arguments
ARG PRODUCTION_PORT=${APP_PORT}   # Port for production deployment (can override default)

# Production environment variables optimized for performance and security
ENV NODE_ENV=production \         # Set Node.js to production mode for performance optimizations
    PORT=${PRODUCTION_PORT} \     # Set standard PORT variable for application use
    NPM_CONFIG_LOGLEVEL=warn \    # Set npm log level to reduce verbose output in production
    NODE_OPTIONS="--enable-source-maps --max-old-space-size=460"  # Node.js options: enable source maps, limit memory to 460MB

# Copy only necessary production files from build stage with proper ownership
COPY --from=build --chown=${USER_NAME}:${GROUP_NAME} ${APP_DIR}/package*.json ./        # Copy package definition files
COPY --from=build --chown=${USER_NAME}:${GROUP_NAME} ${APP_DIR}/node_modules ./node_modules  # Copy production node_modules
COPY --from=build --chown=${USER_NAME}:${GROUP_NAME} ${APP_DIR}/server.js ./            # Copy main server entry point
COPY --from=build --chown=${USER_NAME}:${GROUP_NAME} ${APP_DIR}/src ./src               # Copy source code directory
COPY --from=build --chown=${USER_NAME}:${GROUP_NAME} ${APP_DIR}/public ./public         # Copy static assets directory
COPY --from=build --chown=${USER_NAME}:${GROUP_NAME} ${APP_DIR}/dist ./dist             # Copy distribution/compiled files
COPY --from=build --chown=${USER_NAME}:${GROUP_NAME} ${APP_DIR}/build ./build           # Copy build artifacts

# Switch to non-root user for security during runtime
USER ${USER_ID}                   # Switch to non-root user for application execution

# Define volumes for data persistence in production
VOLUME ["${MOUNT1}", "${MOUNT2}"] # Define mount points for persistent data and log storage

# Document the port that will be exposed for external access
EXPOSE ${APP_PORT}                # Expose the application port for load balancers and reverse proxies

# Configure comprehensive health check for container orchestration
HEALTHCHECK --interval=30s \      # Check application health every 30 seconds
    --timeout=10s \               # Wait maximum 10 seconds for health check response
    --start-period=10s \          # Wait 10 seconds after container start before first health check
    --retries=3 \                 # Retry health check 3 times before marking container as unhealthy
    CMD curl -f ${LOCAL_URL} || exit 1  # Use curl to check health endpoint, exit with error code if failed

# Use tini as init system for proper signal handling and zombie process prevention
ENTRYPOINT ["tini", "--"]         # Use tini as PID 1 for proper signal forwarding to application

# Configure signal for graceful container shutdown
STOPSIGNAL SIGTERM                # Use SIGTERM signal for graceful shutdown (allows cleanup)

# Define the default command to run the application in production
CMD ["node", "server.js"]         # Start the Node.js application using the main server file

# -----------------------------------------------------------------------------
# STAGE 7: TESTING
# Contains: FROM, ARG, ENV, RUN, COPY, VOLUME, USER, CMD
# -----------------------------------------------------------------------------
# Start testing stage from the build stage which has all dependencies and built code
FROM build AS testing

# Test configuration arguments for customizing test execution
ARG TEST_TIMEOUT=30000            # Maximum time in milliseconds for test execution
ARG COVERAGE_THRESHOLD=80         # Minimum percentage of code coverage required for tests to pass

# Test environment variables for test runners and CI/CD integration
ENV NODE_ENV=test \               # Set Node.js environment to test mode
    TEST_TIMEOUT=${TEST_TIMEOUT} \    # Make test timeout available to test frameworks
    COVERAGE_THRESHOLD=${COVERAGE_THRESHOLD} \  # Make coverage threshold available to coverage tools
    CI=true                       # Set CI flag for test frameworks to use non-interactive mode

# Switch to root user for installing test dependencies
USER root                         # Switch to root for package installation operations

# Install all dependencies including test and development dependencies
RUN npm ci --include=dev          # Install all dependencies including devDependencies needed for testing

# Copy test files and configuration files with proper error handling
COPY --chown=${USER_NAME}:${GROUP_NAME} tests/ ./tests/ 2>/dev/null || echo "No tests directory"      # Copy tests directory or show message if doesn't exist
COPY --chown=${USER_NAME}:${GROUP_NAME} test/ ./test/ 2>/dev/null || echo "No test directory"         # Copy test directory or show message if doesn't exist
COPY --chown=${USER_NAME}:${GROUP_NAME} *.test.js ./ 2>/dev/null || echo "No test files"              # Copy test files or show message if none exist
COPY --chown=${USER_NAME}:${GROUP_NAME} jest.config.js ./ 2>/dev/null || echo "No jest config"        # Copy Jest configuration or show message
COPY --chown=${USER_NAME}:${GROUP_NAME} .eslintrc.* ./ 2>/dev/null || echo "No eslint config"         # Copy ESLint configuration files or show message

# Run comprehensive test suite with linting and coverage
RUN npm run lint 2>/dev/null || echo "No lint script found" && \            # Run code linting or show message if no lint script
    npm test 2>/dev/null || echo "No test script found" && \                # Run test suite or show message if no test script
    npm run test:coverage 2>/dev/null || echo "No coverage script found"   # Run code coverage analysis or show message

# Define volumes for test artifacts and results persistence
VOLUME ["${MOUNT1}", "${MOUNT2}", "/app/coverage", "/app/test-results"]  # Volumes for: data, logs, coverage reports, and test results

# Switch to non-root user for security during test execution
USER ${USER_ID}                   # Switch to non-root user for running tests

# Use tini for proper signal handling in test environment
ENTRYPOINT ["tini", "--"]         # Use tini as init system for test processes
CMD ["npm", "run", "test:watch"]  # Default command to run tests in watch mode for development

# -----------------------------------------------------------------------------
# STAGE 8: DEBUG
# Contains: FROM, ARG, ENV, RUN, EXPOSE, VOLUME, USER, ENTRYPOINT, CMD
# -----------------------------------------------------------------------------
# Start debug stage from the production stage to have a clean, minimal base
FROM production AS debug

# Debug configuration arguments
ARG DEBUG_PORT=9229               # Port number for Node.js debugger/inspector

# Debug environment variables for comprehensive debugging
ENV NODE_ENV=development \        # Set to development for better debugging experience and error messages
    DEBUG=* \                     # Enable all debug output (can be overridden for specific modules)
    NODE_OPTIONS="--inspect=0.0.0.0:${DEBUG_PORT} --enable-source-maps"  # Node.js debug options: inspector on all interfaces, source map support

# Switch to root user for installing debugging tools
USER root                         # Switch to root for installing system packages

# Install debugging and diagnostic tools with minimal footprint
# hadolint ignore=DL3008 - Debugging tools don't need version pinning
RUN apt-get update && \           # Update package repository lists
    apt-get install -y --no-install-recommends \  # Install debugging tools without recommended packages
        htop \                    # Interactive process and system monitor
        strace \                  # System call tracer for debugging system interactions
        tcpdump \                 # Network packet analyzer for debugging network issues
        netcat-openbsd \          # Network utility for testing connections (OpenBSD version)
        vim-tiny \                # Lightweight text editor for file inspection and editing
        procps && \               # Process utilities (ps, top, kill, etc.) for process management
    apt-get clean && \            # Clean package manager cache
    rm -rf /var/lib/apt/lists/*   # Remove package lists to reduce image size

# Expose the debug port for remote debugger connections
EXPOSE ${DEBUG_PORT}              # Expose debug port for IDE debugger connections

# Define volumes for debug logs and debugging data
VOLUME ["${MOUNT1}", "${MOUNT2}", "/app/debug-logs"]  # Volumes for: data persistence, logs, and debug-specific logs

# Switch to non-root user for security during debugging
USER ${USER_ID}                   # Switch to non-root user for running the application

# Use tini for proper signal handling in debug mode
ENTRYPOINT ["tini", "--"]         # Use tini as init system for debug processes
CMD ["node", "--inspect=0.0.0.0:9229", "server.js"]  # Start Node.js with debugger listening on all interfaces

# =============================================================================
# BUILD COMMANDS FOR EACH STAGE:
# =============================================================================
# Build base layer:          docker build --target base -t myapp:base .                    # Build minimal base layer with user and system setup
# Build dependencies:        docker build --target dependencies -t myapp:deps .            # Build layer with production dependencies installed
# Build development:         docker build --target development -t myapp:dev .              # Build development environment with dev dependencies and debugging
# Build and compile:         docker build --target build -t myapp:build .                  # Build and compile application for production
# Security scan:             docker build --target security -t myapp:security .            # Run security vulnerability scans on dependencies
# Build production:          docker build --target production -t myapp:prod .              # Build optimized production image
# Build testing:             docker build --target testing -t myapp:test .                 # Build testing environment with test dependencies
# Build debug:               docker build --target debug -t myapp:debug .                  # Build debugging environment with diagnostic tools
# =============================================================================

# =============================================================================
# RUN COMMANDS FOR EACH STAGE:
# =============================================================================
# Run development:           docker run -p 3000:3000 -p 9229:9229 -v $(pwd):/app myapp:dev          # Run development server with hot reload and debugging
# Run production:            docker run -p 3000:3000 --read-only --tmpfs /tmp myapp:prod             # Run production server with read-only filesystem for security
# Run tests:                 docker run --rm myapp:test                                               # Run test suite and remove container after completion
# Run debug:                 docker run -p 3000:3000 -p 9229:9229 myapp:debug                       # Run application with debugger enabled for IDE connection
# Health check:              docker run --rm myapp:prod node -e "console.log('Health check test')"  # Test application health check functionality
# =============================================================================

# =============================================================================
# DOCKER COMPOSE EXAMPLE:
# =============================================================================
# version: '3.8'                                           # Docker Compose file format version
# services:                                                # Define services for the application stack
#   app:                                                   # Main application service definition
#     build:                                               # Build configuration for the service
#       context: .                                         # Build context is current directory
#       target: production                                 # Use production stage as the target
#     ports:                                               # Port mapping from host to container
#       - "3000:3000"                                      # Map host port 3000 to container port 3000
#     volumes:                                             # Volume mounts for data persistence
#       - app-data:/app/data                               # Mount named volume for application data
#       - app-logs:/app/logs                               # Mount named volume for application logs
#     environment:                                         # Environment variables for the container
#       - NODE_ENV=production                              # Set Node.js environment to production
#     restart: unless-stopped                              # Restart policy: restart unless explicitly stopped
#     healthcheck:                                         # Health check configuration for the service
#       test: ["CMD", "curl", "-f", "http://localhost:3000/health"]  # Command to test application health
#       interval: 30s                                      # Run health check every 30 seconds
#       timeout: 10s                                       # Health check timeout
#       retries: 3                                         # Number of retries before marking unhealthy
# volumes:                                                 # Named volumes definition
#   app-data:                                              # Volume for persistent application data
#   app-logs:                                              # Volume for persistent application logs
# =============================================================================