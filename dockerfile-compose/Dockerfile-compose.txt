==================================================================================
ðŸ“Œ Module 1: Dockerfile â€“ Basics
==================================================================================
Lesson 1: Introduction to Dockerfile
What is a Dockerfile?
Basic Syntax (FROM, RUN, CMD, COPY, WORKDIR)
Creating Your First Dockerfile (with equivalent Docker commands as comments)
Building an Image (docker build)
Running a Container from an Image (docker run)
Tagging Images (docker tag)
âœ… Hands-on Demo: Write a basic Dockerfile for a Flask App
âœ… Mini Project: Dockerize a To-Do List App with Flask
==================================================================================
Lesson 2: Layering & Optimization
Understanding Image Layers & Caching
Best Practices for Small & Efficient Images
Using .dockerignore to Exclude Files
Common Pitfalls (e.g., Cache Busting)
âœ… Hands-on Demo: Optimize an Express.js App Dockerfile (with equivalent Docker commands as comments)
âœ… Mini Project: Create a lightweight Node.js container using best practices
==================================================================================
ðŸ“Œ Module 2: Dockerfile â€“ Intermediate Level
==================================================================================
Lesson 3: Environment Configuration
Setting Environment Variables (ENV)
Exposing Ports (EXPOSE)
Understanding ENTRYPOINT vs. CMD
Using ARG for Build-time Variables
Healthchecks (HEALTHCHECK)
âœ… Hands-on Demo: Use ENV and ARG in a Node.js App
âœ… Mini Project: Dockerize a Go-based API with environment variables
==================================================================================
Lesson 4: Managing Dependencies
Installing Packages in a Dockerfile
Using Multi-Stage Builds for Optimization
Running Scripts (RUN, COPY, ADD)
Distroless Images for Security
âœ… Hands-on Demo: Implement a Multi-Stage Build for a GoLang App
âœ… Mini Project: Create a lightweight, production-ready container for a React App
==================================================================================
Lesson 5: Working with Volumes & Networking
Persistent Storage (VOLUME)
Networking Between Containers (docker network)
Custom Bridge Networks
Overlay Networks Introduction
âœ… Hands-on Demo: Connect two containers (Frontend + Backend) using Docker Networks
âœ… Mini Project: Set up a MySQL Database with persistent storage using Docker Volumes
==================================================================================
ðŸ“Œ Module 3: Dockerfile â€“ Advanced Level
==================================================================================
Lesson 6: Advanced Dockerfile Features
Using Labels (LABEL) for Metadata
User Management (USER) for Security
On-Build Instructions (ONBUILD) for Base Image Customization
Managing Signals (STOPSIGNAL)
Understanding SHELL Instructions for Different Shell Environments
Custom Entrypoints with Scripts
âœ… Hands-on Demo: Add Metadata, User Restrictions, Custom Shell, and Entrypoint Script to a Python App
âœ… Mini Project: Create a Secure, Metadata-rich Docker Image for a Django App with Version Tracking and Signal Handling
==================================================================================
Lesson 7: Dockerfile Security Best Practices
Running Containers as Non-Root Users
Reducing Image Size with Minimal Base Images
Using Distroless & Scratch Images for Security
Scanning for Vulnerabilities (Trivy, Docker Scout, BuildKitâ€™s SBOM Integration)
Managing Secrets Securely (BuildKit Secrets Mount, Avoiding ENV for Sensitive Data)
âœ… Hands-on Demo: Build a Secure Nginx Image with Non-Root User, Scan with Trivy
âœ… Mini Project: Dockerize a Secure REST API with Distroless Images and Secret Management
==================================================================================
Lesson 8: Advanced Multi-Stage Builds & Performance Optimization
Advanced Multi-Stage Builds for Small Images
Caching Strategies for Faster Builds (BuildKit Cache Mounts)
Using External Build Contexts
Efficient Image Cleanup (--squash, BuildKit Output Options)
Benchmarking Image Size and Build Time
âœ… Hands-on Demo: Create a Multi-Stage Build for a Microservices App, Measure Optimization
âœ… Mini Project: Optimize a Large Python Web App with BuildKit Caching
==================================================================================
Lesson 9: Debugging & Troubleshooting Dockerfile Issues
Debugging Failing Builds (docker build --progress=plain)
Using docker logs for Container Debugging
Running Interactive Debugging with docker exec
Inspecting Image Layers (docker history, docker inspect)
Fixing Common Dockerfile Errors (e.g., Permission Denied, Package Conflicts)
Using BuildKitâ€™s Debug Mode (--debug)
Profiling with docker stats for Performance Issues
âœ… Hands-on Demo: Troubleshoot a Broken React App Dockerfile, Fix Dependency Conflict
âœ… Mini Project: Build a Debuggable Streaming Service Container with Logging and Health Checks
ðŸš€ Capstone Project: Build a Full Production-Ready Application
Goal: Dockerize a multi-container app with Multi-Stage Builds, Security, and Monitoring; Prepare for Cloud Deployment
Stack: React (Frontend), Node.js/Express (Backend), PostgreSQL (Database), Redis (Caching)
Security: Distroless Images, Non-Root User, Secrets Management
Optimization: Multi-Stage Builds, Caching
Monitoring: Basic Metrics Collection via HEALTHCHECK
==================================================================================
ðŸ“Œ Module 4: Docker Compose â€“ Basics Level
==================================================================================
Lesson 10: Introduction to Docker Compose
What is Docker Compose?
Installing Docker Compose
Writing Your First docker-compose.yml
Running Multiple Containers (docker-compose up)
Stopping and Cleaning Up (docker-compose down)
âœ… Hands-on Demo: Create a Docker Compose file for a Flask + PostgreSQL app
âœ… Mini Project: Build a WordPress + MySQL blog using Docker Compose
==================================================================================
Lesson 11: Defining Services
Services, Networks, and Volumes
Connecting Multiple Containers
Using depends_on for Service Dependencies
Managing Environment Variables in Compose
Compose File Versioning
âœ… Hands-on Demo: Connect a React Frontend + Node.js API + MongoDB using Docker Compose
âœ… Mini Project: Deploy a Full-Stack Web App using Docker Compose
==================================================================================
ðŸ“Œ Module 5: Docker Compose â€“ Intermediate Level
==================================================================================
Lesson 12: Optimizing Docker Compose Workflow
Override Default Configurations (docker-compose.override.yml)
Using .env Files for Environment Variables
Sharing Data Between Containers with Named Volumes
Debugging & Logging (docker-compose logs, docker-compose ps, docker-compose events)
Using Profiles for Selective Service Startups
Live Development with Compose Watch (watch)
âœ… Hands-on Demo: Manage Multiple Configurations with Override Files and watch for a Flask App
âœ… Mini Project: Build a Production-Ready Laravel + MySQL Stack with Profiles
==================================================================================
Lesson 13: Enhancing Container Communication & Dependencies
Custom Networking (docker network create)
Cross-Container Communication
Using healthcheck for Service Dependencies
Automatic Service Restart (restart: always)
Running Background Services (detach mode)
Secure Communication (Secrets, TLS Between Services)
âœ… Hands-on Demo: Create a Robust Microservices Network with Health Checks and Secrets
âœ… Mini Project: Deploy a Secure Messaging App (RabbitMQ + Node.js + MongoDB) with Secret Management
==================================================================================
Lesson 14: Managing Multi-Container Applications in Production
Deploying with docker-compose up -d --build
Handling Configuration Updates (docker-compose pull && up -d)
Managing Logs & Monitoring Performance (Resource Limits with mem_limit and cpu)
Using depends_on vs. Health Checks for Stability
Optimizing Startup Order of Services
Scaling Services (--scale) and Orchestration Prep (Swarm Compatibility)
âœ… Hands-on Demo: Set Up a Monitoring Dashboard with Prometheus + Grafana and Resource Constraints
âœ… Mini Project: Deploy a Video Streaming App (React + Node.js + FFmpeg) with Scaling and Monitoring
==================================================================================
ðŸ“Œ Module 6: Docker Compose â€“ Advanced Level
==================================================================================
Lesson 15: Scaling & Orchestration
Running Multiple Instances (docker-compose scale)
Using Restart Policies
Load Balancing with Nginx & Compose
Intro to Docker Swarm
Docker Buildx for Multi-Platform Images
âœ… Hands-on Demo: Scale a Node.js API with Docker Compose
âœ… Mini Project: Deploy a Scalable Microservices Architecture
==================================================================================
Lesson 16: Advanced Networking & Storage
Linking Containers & Named Volumes
External Databases in Compose
Persistent Storage for Stateful Applications
Backup Strategies for Volumes
Bridge networking in detail
Host networking mode use cases
None networking mode
Macvlan and IPvlan for specialized networking
DNS resolution between containers
Overlay Networks for Multi-Host Deployments
âœ… Hands-on Demo: Store Persistent MongoDB Data Using Named Volumes
âœ… Mini Project: Deploy a GraphQL API with PostgreSQL and Redis
==================================================================================
Lesson 17: CI/CD & Automation
Integrating Docker Compose with GitHub Actions
Automating Builds & Deployments
Using Docker Secrets for Secure Configurations
Docker Buildx for Multi-Platform Images
Automated Testing with Compose in CI
âœ… Hands-on Demo: Create a CI/CD Pipeline using GitHub Actions & Docker
âœ… Mini Project: Automate Docker Builds & Deployments for a Full-Stack App
==================================================================================
ðŸ“Œ Module 7: Real-World Projects
==================================================================================
Lesson 18: Hands-On Projects
âœ… Project 1: Deploying a Flask or Node.js App with PostgreSQL
âœ… Project 2: Multi-Container Application with React, Node.js, and MongoDB
âœ… Project 3: CI/CD Pipeline Using Docker, Jenkins, and Compose
âœ… Bonus: Deploy to AWS ECS, DigitalOcean, Kubernetes, or AWS Fargate with Multi-Cloud Considerations
==================================================================================
ðŸ“Œ Module 8: Best Practices & Debugging
==================================================================================
Lesson 19: Security & Optimization
Docker Security Best Practices
Minimizing Image Size
Scanning for Vulnerabilities (Trivy or Docker Scan)
Non-Root Containers
âœ… Hands-on Demo: Scan & Fix Vulnerabilities in a Docker Image
âœ… Mini Project: Harden a Dockerized Node.js App with Security Best Practices
==================================================================================
Lesson 20: Debugging & Troubleshooting
Logs & Container Monitoring (docker logs)
Debugging Failing Builds (docker inspect, docker exec)
Common Issues & Fixes
Resource Monitoring (CPU/Memory)
Using docker events for Real-Time Diagnostics
âœ… Hands-on Demo: Debug & Fix Issues in a Broken Docker Container
âœ… Mini Project: Monitor a Running Dockerized Application with Prometheus & Grafana
==================================================================================
Final Capstone Project
ðŸŽ¯ Build and Deploy a Microservices-Based Application
Use Docker Compose for multi-container management
Implement Security & Monitoring
Deploy to AWS ECS, DigitalOcean, Kubernetes, or AWS Fargate
Document Deployment Process
Add Scalability Testing with Load Balancing
