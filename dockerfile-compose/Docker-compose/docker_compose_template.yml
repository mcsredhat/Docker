version: "3.8" # Docker Compose file version - determines available features

services: # Define all services/containers for this application
  app: # Main application service name
    image: image:tag # Docker image to use - change to your desired image:tag

    # Build configuration (uncomment if building from Dockerfile)
    # build:                             # Alternative to 'image' - build from source code
    #   context: .                       # Build context directory (usually current directory)
    #   dockerfile: Dockerfile           # Dockerfile name to use for building
    #   args:                            # Build arguments passed to Dockerfile
    #     - IMAGE_VERSION=alpine         # Base image version argument
    #     - USER_ID=1010                 # User ID for container user
    #     - USER_NAME=appuser            # Username for container user
    #     - GROUP_ID=1010                # Group ID for container group
    #     - GROUP_NAME=appgroup          # Group name for container group
    #     - APP_PORT=8080                # Application port argument
    #     - HOST=localhost               # Host configuration argument
    #     - LOCAL_URL=http://localhost   # Local URL configuration
    #     - APP_ENV=production           # Environment type (production/development)
    #     - BASH_SHELL=/bin/bash         # Shell path configuration
    #     - APP_DIR=/app                 # Application directory inside container
    #     - MOUNT1=/app/data             # First mount point configuration
    #     - MOUNT2=/app/logs             # Second mount point configuration

    container_name: project_name # Custom name for the container (instead of auto-generated)
    hostname: project_host # Hostname inside the container network

    labels: # Metadata labels for container organization
      - "maintainer=your-email@example.com" # Contact information for maintenance
      - "app=your_project_type" # Application type/category label
      - "version=1.0.0" # Version label for tracking

    environment: # Environment variables inside the container
      IMAGE_VERSION: "number_of_image" # Image version environment variable
      USER_ID: "USERID" # User ID for application user
      USER_NAME: USERNAME # Username for application user
      GROUP_ID: "GROUPID" # Group ID for application group
      GROUP_NAME: GROUPNAME # Group name for application group
      APP_PORT: "number_of_port" # Port number the application listens on
      HOST: localhost # Host configuration for the application
      LOCAL_URL: http://localhost # Local URL for application access
      APP_ENV: production # Environment type (affects app behavior)
      BASH_SHELL: /bin/bash # Shell path for container operations
      APP_DIR: your_project_dir # Main application directory on host and on image such as /app
      MOUNT1: your_project_dir/data # First mount point path on image
      MOUNT2: your_project_dir/logs # Second mount point path on image
      BACKEND_HOST: database # Database host connection string
      TZ: Europe/Paris # Timezone setting for the container

    # Service dependencies (uncomment if needed)
    # depends_on:                        # Services that must start before this one
    #   - database                       # Wait for database service to start
    #   - redis                          # Wait for redis service to start

    networks: # Networks this container joins
      - "app-network" # Connect to the app-network (defined below)

    dns: # Custom DNS servers for the container
      - 1.1.1.1 # Cloudflare DNS server
      - 8.8.8.8 # Google DNS server

    ports: # Port mapping between host and container
      - "HOST_PORT:CONTAINER_PORT" # Format: "host_port:container_port" - change as needed

    volumes: # Mount host directories/files into container
      - ./logs:your_project_dir/logs:ro # Mount host ./logs to container project_dir/logs (read-only)
      - ./data:your_project_dir/data:ro # Mount host ./data to container project_dir/data (read-only)

    tmpfs: # Temporary filesystems in memory (faster I/O)
      - /var/cache:rw,size=50m,mode=755 # Cache in memory (50MB, writable)
      - /var/run:rw,size=50m,mode=755 # Runtime files in memory (50MB, writable)
      - /tmp:rw,size=50m,mode=1777 # Temporary files in memory (50MB, world-writable)

    mem_limit: 1g # Maximum memory usage limit (1 gigabyte)
    mem_reservation: 512m # Soft memory limit (512 megabytes)
    cpus: 0.5 # CPU limit (half of one CPU core)

    ulimits: # Resource limits for the container
      nfile: # File descriptor limits
        soft: 1024 # Soft limit for open files
        hard: 65536 # Hard limit for open files
      nproc: # Process limits
        soft: 1024 # Soft limit for processes
        hard: 4096 # Hard limit for processes

    healthcheck: # Container health monitoring
      test: [
          "CMD-SHELL",
          "wget --quiet --tries=1 --spider http://localhost:80/ || exit 1",
        ] # Health check command
      interval: 30s # Time between health checks
      timeout: 10s # Timeout for each health check
      retries: 3 # Number of retries before marking unhealthy
      start_period: 10s # Grace period before starting health checks

    logging: # Container logging configuration
      driver: json-file # Use JSON file logging driver
      options: # Logging driver options
        max-size: "50m" # Maximum size per log file
        max-file: "10" # Maximum number of log files to keep
        compress: "true" # Compress old log files

    security_opt: # Security options for the container
      - "no-new-privileges:true" # Prevent privilege escalation

    cap_drop: # Remove Linux capabilities (security hardening)
      - ALL # Drop all capabilities by default

    cap_add: # Add back only necessary Linux capabilities
      - NET_BIND_SERVICE # Allow binding to privileged ports (<1024)
      - CHOWN # Allow changing file ownership
      - SETGID # Allow setting group ID
      - SETUID # Allow setting user ID
      - DAC_OVERRIDE # Allow bypassing file permission checks

    read_only: true # Make the root filesystem read-only (security)
    user: "USER_ID:GROUP_ID" # Run container as specific user:group (non-root)
    restart: unless-stopped # Restart policy (restart unless manually stopped)
    working_dir: your_project_dir # Set working directory inside container

  # Additional services (uncomment as needed)
  # database:                           # PostgreSQL database service
  #   image: postgres:15                # PostgreSQL version 15 official image
  #   container_name: my-app-db         # Custom container name for database
  #   environment:                      # Database configuration via environment variables
  #     POSTGRES_DB: myapp              # Database name to create
  #     POSTGRES_USER: user             # Database user to create
  #     POSTGRES_PASSWORD: password     # Password for database user
  #   ports:                            # Port mapping for database access
  #     - "5432:5432"                   # Map host port 5432 to container port 5432
  #   volumes:                          # Persistent storage for database data
  #     - db_data:/var/lib/postgresql/data  # Mount named volume for data persistence
  #   networks:                         # Network connection for database
  #     - app-network                   # Connect to the same network as app
  #   healthcheck:                      # Database health monitoring
  #     test: ["CMD-SHELL", "pg_isready -U user -d myapp"]  # PostgreSQL ready check
  #     interval: 30s                   # Check every 30 seconds
  #     timeout: 10s                    # Timeout after 10 seconds
  #     retries: 3                      # Retry 3 times before marking unhealthy
  # redis:                             # Redis cache/session store service
  #   image: redis:alpine               # Lightweight Redis image based on Alpine Linux
  #   container_name: my-app-redis      # Custom container name for Redis
  #   ports:                            # Port mapping for Redis access
  #     - "6379:6379"                   # Map host port 6379 to container port 6379
  #   networks:                         # Network connection for Redis
  #     - app-network                   # Connect to the same network as app
  #   healthcheck:                      # Redis health monitoring
  #     test: ["CMD", "redis-cli", "ping"]  # Redis ping command for health check
  #     interval: 30s                   # Check every 30 seconds
  #     timeout: 10s                    # Timeout after 10 seconds
  #     retries: 3                      # Retry 3 times before marking unhealthy

networks: # Network definitions for inter-service communication
  app-network: # Custom network name
    driver: bridge # Use bridge driver (default for single-host networking)
    ipam: # IP Address Management configuration
      config: # Network configuration settings
        - subnet: 172.19.19.0/24 # Define subnet range for container IPs

# volumes:                           # Named volumes for persistent data storage
#   db_data:                         # Volume name for database data persistence
